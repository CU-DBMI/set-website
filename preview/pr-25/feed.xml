<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/set-website/preview/pr-25/feed.xml" rel="self" type="application/atom+xml" /><link href="/set-website/preview/pr-25/" rel="alternate" type="text/html" /><updated>2023-10-31T11:15:52+00:00</updated><id>/set-website/preview/pr-25/feed.xml</id><title type="html">Software Engineering Team</title><subtitle>The software engineering team of the Department of Biomedical Informatics at the University of Colorado Anschutz</subtitle><entry><title type="html">Tip of the Week: Data Quality Validation through Software Testing Techniques</title><link href="/set-website/preview/pr-25/2023/10/04/Data-Quality-Valitation.html" rel="alternate" type="text/html" title="Tip of the Week: Data Quality Validation through Software Testing Techniques" /><published>2023-10-04T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2023/10/04/Data-Quality-Valitation</id><content type="html" xml:base="/set-website/preview/pr-25/2023/10/04/Data-Quality-Valitation.html"><![CDATA[<h1 id="tip-of-the-week-data-quality-validation-through-software-testing-techniques">Tip of the Week: Data Quality Validation through Software Testing Techniques</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<p><strong>TLDR (too long, didn&#8217;t read);</strong></p>

<p>Implement data quality validation through <a href="https://en.wikipedia.org/wiki/Software_testing">software testing</a> approaches which leverage ideas surrounding <a href="https://en.wikipedia.org/wiki/Hoare_logic#Hoare_triple">Hoare triples</a> and <a href="https://en.wikipedia.org/wiki/Design_by_contract">Design by contract (DbC)</a>. Balancing reusability through <a href="https://en.wikipedia.org/wiki/Component-based_software_engineering">component-based design</a> data testing with <a href="https://github.com/great-expectations/great_expectations">Great Expectations</a> or <a href="https://github.com/ropensci/assertr/">Assertr</a>. For greater specificity in your data testing, use <a href="https://en.wikipedia.org/wiki/Database_schema">database schema-like</a> verification through <a href="https://pandera.readthedocs.io/en/stable/index.html">Pandera</a> or a <a href="https://json-schema.org/learn/getting-started-step-by-step">JSON Schema</a> validator. When possible, practice <a href="https://en.wikipedia.org/wiki/Shift-left_testing">shift-left testing</a> on data sources by through the concept of <a href="https://speakerdeck.com/tastapod/arent-we-forgetting-someone">&#8220;database(s) as code&#8221;</a> via tools like <a href="https://dvc.org/doc">Data Version Control (DVC)</a> and <a href="https://github.com/flyway/flyway">Flyway</a>.</p>

<h2 id="introduction">Introduction</h2>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCBsb2NhbCBbXCJEYXRhIFF1YWxpdHkgVmFsaWRhdGlvblwiXVxuZGlyZWN0aW9uIExSXG4lJS1cbmlucHV0X2RhdGFbKFwiSW5wdXQgRGF0YVwiKV1cbm1ldF9zcGVjaWZpY2F0aW9uMXtcIk1ldFxcbnNwZWNzP1wifVxucHJvY2Vzc19kYXRhW1wiRGF0YSBwcm9jZXNzaW5nXCJdXG5tZXRfc3BlY2lmaWNhdGlvbjJ7XCJNZXQgXFxuc3BlY3M_XCJ9XG5vdXRwdXRfZGF0YVsoXCJPdXRwdXQgRGF0YVwiKV1cbmVuZFxuJSUtXG5pbnB1dF9kYXRhIC0tPiBtZXRfc3BlY2lmaWNhdGlvbjFcbm1ldF9zcGVjaWZpY2F0aW9uMSAtLT4gcHJvY2Vzc19kYXRhXG5wcm9jZXNzX2RhdGEgLS0-IG1ldF9zcGVjaWZpY2F0aW9uMlxubWV0X3NwZWNpZmljYXRpb24yIC0tPiBvdXRwdXRfZGF0YSIsIm1lcm1haWQiOm51bGx9" /></p>

<p><em>Diagram showing input, in-process data, and output data as a workflow.</em></p>

<!-- excerpt start -->
<p>Data orientated software development can benefit from a specialized focus on varying aspects of data quality validation.
We can use <a href="https://en.wikipedia.org/wiki/Software_testing">software testing</a> techniques to validate certain qualities of the data in order to meet a declarative standard (where one doesn&#8217;t need to guess or rediscover known issues).
These come in a number of forms and generally follow existing software testing concepts which we&#8217;ll expand upon below.
This article will cover a few tools which leverage these techniques for addressing data quality validation testing.
<!-- excerpt end --></p>
<h2 id="data-quality-testing-concepts">Data Quality Testing Concepts</h2>

<h3 id="hoare-triple">Hoare Triple</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCBsb2NhbCBbXCJEYXRhIFdvcmtmbG93IGFzIEhvYXJlIFRyaXBsZVwiXVxuZGlyZWN0aW9uIExSXG5pbnB1dF9kYXRhWyhcIklucHV0IERhdGFcXG4oUCAtIHByZWNvbmRpdGlvbilcIildXG5wcm9jZXNzX2RhdGFbXCJEYXRhIHByb2Nlc3NpbmdcXG4oQyAtIGNvbW1hbmQpXCJdXG5vdXRwdXRfZGF0YVsoXCJPdXRwdXQgRGF0YVxcbihRIC0gcG9zdGNvbmRpdGlvbilcIildXG5lbmRcbiUlLVxuaW5wdXRfZGF0YSAtLT4gcHJvY2Vzc19kYXRhIC0tPiBvdXRwdXRfZGF0YSIsIm1lcm1haWQiOm51bGx9" /></p>

<p>One concept we&#8217;ll use to present these ideas is <a href="https://en.wikipedia.org/wiki/Hoare_logic"><em>Hoare logic</em></a>, which is a system for reasoning on <a href="https://en.wikipedia.org/wiki/Correctness_(computer_science)">software correctness</a>.
Hoare logic includes the idea of a <a href="https://en.wikipedia.org/wiki/Hoare_logic#Hoare_triple">Hoare triple</a> ($ {\displaystyle {P}C{Q}} $) where $ {\displaystyle {P}} $ is an assertion of precondition, $ {\displaystyle \ C} $ is a command, and $ {\displaystyle {Q}} $ is a postcondition assertion.
Software development using data often entails (sometimes assumed) assertions of precondition from data sources, a transformation or command which changes the data, and a (sometimes assumed) assertion of postcondition in a data output or result.</p>

<h3 id="design-by-contract">Design by Contract</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCBsb2NhbCBbXCJEYXRhIFRlc3RpbmcgdGhyb3VnaCBEZXNpZ24gYnkgQ29udHJhY3Qgb3ZlciBIb2FyZSBUcmlwbGVcIl1cbmRpcmVjdGlvbiBMUlxuc3ViZ3JhcGggaG9hcmVfdHJpcGxlIFtcIkhvYXJlIFRyaXBsZVwiXVxuZGlyZWN0aW9uIExSXG5pbnB1dF9kYXRhWyhcIklucHV0IERhdGFcXG4oUCAtIHByZWNvbmRpdGlvbilcIildXG4lJS1cbnByb2Nlc3NfZGF0YVtcIkRhdGEgcHJvY2Vzc2luZ1xcbihDIC0gY29tbWFuZClcIl1cbiUlLVxub3V0cHV0X2RhdGFbKFwiT3V0cHV0IERhdGFcXG4oUSAtIHBvc3Rjb25kaXRpb24pXCIpXVxuZW5kXG5zdWJncmFwaCBkYmMgW1wiRGVzaWduIGJ5IENvbnRyYWN0XCJdXG5kaXJlY3Rpb24gTFJcbm1ldF9zcGVjaWZpY2F0aW9uMXtcIk1ldFxcbnNwZWNzP1wifVxuY29udHJhY3QxKFtcIkNvbnRyYWN0KHMpXCJdKVxubWV0X3NwZWNpZmljYXRpb24ye1wiTWV0IFxcbnNwZWNzP1wifVxuY29udHJhY3QyKFtcIkNvbnRyYWN0KHMpXCJdKVxuZW5kXG5lbmRcbiUlLVxuaW5wdXRfZGF0YSAtLT4gbWV0X3NwZWNpZmljYXRpb24xXG5tZXRfc3BlY2lmaWNhdGlvbjEgLS0-IHByb2Nlc3NfZGF0YVxucHJvY2Vzc19kYXRhIC0tPiBtZXRfc3BlY2lmaWNhdGlvbjJcbm1ldF9zcGVjaWZpY2F0aW9uMiAtLT4gb3V0cHV0X2RhdGFcbmNvbnRyYWN0MSAtLT4gbWV0X3NwZWNpZmljYXRpb24xXG5jb250cmFjdDIgLS0-IG1ldF9zcGVjaWZpY2F0aW9uMlxuJSUtIiwibWVybWFpZCI6bnVsbH0" /></p>

<p><em>Data testing through design by contract over Hoare triple.</em></p>

<p>Hoare logic and Software correctness help describe <a href="https://en.wikipedia.org/wiki/Design_by_contract">design by contract (DbC)</a>, a software approach involving the formal specification of &#8220;contracts&#8221; which help ensure we meet our intended goals.
DbC helps describe how to create assertions when proceeding through Hoare triplet states for data.
These concepts provide a framework for thinking about the tools mentioned below.</p>

<h2 id="data-component-testing">Data Component Testing</h2>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5pbnB1dF9kYXRhWyhcIkRhdGEgdG8gY2hlY2tcIildXG5oYXNfY29tcG9uZW50c3tcIkV4aGliaXRzXFxuY29tcG9uZW50cz9cIn1cbmNvbnRyYWN0KFtcIkNvbnRyYWN0KHMpXCJdKVxuY29tcG9uZW50c1tcIi0gSGFzIG5vIG51bGwgdmFsdWVzXFxuLSBDb2x1bW5zIGFyZSBhbGwgbnVtZXJpY1xcbi0gZXRjLi4uXCJdXG5jb250aW51ZVtcIkNvbnRpbnVlXFxub3BlcmF0aW9uc1wiXVxuZXJyb3JbXCJSYWlzZVxcbmV4Y2VwdGlvblwiXVxuJSUtXG5jb21wb25lbnRzIC0tPiBjb250cmFjdFxuaW5wdXRfZGF0YSAtLT4gaGFzX2NvbXBvbmVudHNcbmNvbnRyYWN0IC0uLT4gaGFzX2NvbXBvbmVudHNcbmhhc19jb21wb25lbnRzIC0tPiB8IFllcyB8IGNvbnRpbnVlXG5oYXNfY29tcG9uZW50cyAtLT4gfCBObyB8IGVycm9yXG4lJS1cbnN0eWxlIGVycm9yIGZpbGw6I0ZFRDdBQVxuc3R5bGUgY29udGludWUgZmlsbDojRENGQ0U3XG5zdHlsZSBjb21wb25lbnRzIGZpbGw6I2ZmZiIsIm1lcm1haWQiOm51bGx9" /></p>

<p><em>Diagram showing data contracts as <strong>generalized and reusable &#8220;component&#8221; testing</strong> being checked through contracts and raising an error if they aren&#8217;t met or continuing operations if they are met.</em></p>

<p>We often need to verify a certain component&#8217;s surrounding data in order to ensure it meets minimum standards.
The word &#8220;component&#8221; is used here from the context of <a href="https://en.wikipedia.org/wiki/Component-based_software_engineering">component-based software design</a> to group together reusable, modular qualities of the data where sometimes we don&#8217;t know (or want) to specify granular aspects (such as schema, type, column name, etc).
These components often are implied by software which will eventually use the data, which can emit warnings or errors when they find the data does not meet these standards.
Oftentimes these components are contracts checking postconditions of earlier commands or procedures, ensuring the data we receive is accurate to our intention.
<strong><em>We can avoid these challenges by creating contracts for our data to verify the components of the result before it reaches later stages.</em></strong></p>

<p>Examples of these data components might include:</p>

<ul>
  <li>The dataset has no null values.</li>
  <li>The dataset has no more than 3 columns.</li>
  <li>The dataset has a column called <code class="language-plaintext highlighter-rouge">numbers</code> which includes numbers in the range of 0-10.</li>
</ul>

<h3 id="data-component-testing---great-expectations">Data Component Testing - Great Expectations</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
Example of using Great Expectations
Referenced with modifications from: 
https://docs.greatexpectations.io/docs/tutorials/quickstart/
"""</span>
<span class="kn">import</span> <span class="nn">great_expectations</span> <span class="k">as</span> <span class="n">gx</span>

<span class="c1"># get gx DataContext
# see: https://docs.greatexpectations.io/docs/terms/data_context
</span><span class="n">context</span> <span class="o">=</span> <span class="n">gx</span><span class="p">.</span><span class="n">get_context</span><span class="p">()</span>

<span class="c1"># set a context data source 
# see: https://docs.greatexpectations.io/docs/terms/datasource
</span><span class="n">validator</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">sources</span><span class="p">.</span><span class="n">pandas_default</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span>
    <span class="s">"https://raw.githubusercontent.com/great-expectations/gx_tutorials/main/data/yellow_tripdata_sample_2019-01.csv"</span>
<span class="p">)</span>

<span class="c1"># add and save expectations 
# see: https://docs.greatexpectations.io/docs/terms/expectation
</span><span class="n">validator</span><span class="p">.</span><span class="n">expect_column_values_to_not_be_null</span><span class="p">(</span><span class="s">"pickup_datetime"</span><span class="p">)</span>
<span class="n">validator</span><span class="p">.</span><span class="n">expect_column_values_to_be_between</span><span class="p">(</span><span class="s">"passenger_count"</span><span class="p">,</span> <span class="n">auto</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">validator</span><span class="p">.</span><span class="n">save_expectation_suite</span><span class="p">()</span>

<span class="c1"># checkpoint the context with the validator
# see: https://docs.greatexpectations.io/docs/terms/checkpoint
</span><span class="n">checkpoint</span> <span class="o">=</span> <span class="n">context</span><span class="p">.</span><span class="n">add_or_update_checkpoint</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="s">"my_quickstart_checkpoint"</span><span class="p">,</span>
    <span class="n">validator</span><span class="o">=</span><span class="n">validator</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># gather checkpoint expectation results
</span><span class="n">checkpoint_result</span> <span class="o">=</span> <span class="n">checkpoint</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>

<span class="c1"># show the checkpoint expectation results
</span><span class="n">context</span><span class="p">.</span><span class="n">view_validation_result</span><span class="p">(</span><span class="n">checkpoint_result</span><span class="p">)</span>
</code></pre></div></div>

<p><em>Example code leveraging Python package Great Expectations to perform various data component contract validation.</em></p>

<p><a href="https://github.com/great-expectations/great_expectations">Great Expectations</a> is a Python project which provides data  contract testing features through the use of component called <a href="https://greatexpectations.io/expectations/">&#8220;expectations&#8221;</a> about the data involved.
These expectations act as a standardized way to define and validate the component of the data in the same way across different datasets or projects.
In addition to providing a mechanism for validating data contracts, Great Expecations also provides a way to <a href="https://docs.greatexpectations.io/docs/guides/setup/configuring_metadata_stores/configure_result_stores">view validation results</a>, <a href="https://docs.greatexpectations.io/docs/guides/setup/configuring_metadata_stores/configure_expectation_stores">share expectations</a>, and also <a href="https://docs.greatexpectations.io/docs/guides/setup/configuring_data_docs/host_and_share_data_docs">build data documentation</a>.
See the above example for a quick code reference of how these work.</p>

<h3 id="data-component-testing---assertr">Data Component Testing - Assertr</h3>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example using the Assertr package</span><span class="w">
</span><span class="c1"># referenced with modifications from:</span><span class="w">
</span><span class="c1"># https://docs.ropensci.org/assertr/articles/assertr.html</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">assertr</span><span class="p">)</span><span class="w">

</span><span class="c1"># set our.data to reference the mtcars dataset</span><span class="w">
</span><span class="n">our.data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mtcars</span><span class="w">

</span><span class="c1"># simulate an issue in the data for contract specification</span><span class="w">
</span><span class="n">our.data</span><span class="o">$</span><span class="n">mpg</span><span class="p">[</span><span class="m">5</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">our.data</span><span class="o">$</span><span class="n">mpg</span><span class="p">[</span><span class="m">5</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="m">-1</span><span class="w">

</span><span class="c1"># use verify to validate that column mpg &gt;= 0</span><span class="w">
</span><span class="n">our.data</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">verify</span><span class="p">(</span><span class="n">mpg</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w">

</span><span class="c1"># use assert to validate that column mpg is within the bounds of 0 to infinity</span><span class="w">
</span><span class="n">our.data</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">assert</span><span class="p">(</span><span class="n">within_bounds</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="kc">Inf</span><span class="p">),</span><span class="w"> </span><span class="n">mpg</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><em>Example code leveraging R package Assertr to perform various data component contract validation.</em></p>

<p><a href="https://github.com/ropensci/assertr/">Assertr</a> is an R project which provides similar data component assertions in the form of verify, assert, and insist methods (<a href="https://docs.ropensci.org/assertr/articles/assertr.html">see here for more documentation</a>).
Using Assertr enables a similar but more lightweight functionality to that of Great Expectations.
See the above for an example of how to use it in your projects.</p>

<h2 id="data-schema-testing">Data Schema Testing</h2>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG4lJS1cbmlucHV0X2RhdGFbKFwiRGF0YSB0byBjaGVja1wiKV1cbmhhc19zY2hlbWF7XCJIYXNcXG5zY2hlbWE_XCJ9XG5jb250cmFjdChbXCJDb250cmFjdChzKVwiXSlcbnNjaGVtYVtcIi0gSGFzIGNvbHVtbiB4IG9mIHR5cGUgZmxvYXQgXFxuLSBIYXMgbm9uLW51bGwgY29sdW1uIHkgb2YgdHlwZSBpbnRcXG4gLSBldGMuLi5cIl1cbmNvbnRpbnVlW1wiQ29udGludWVcXG5vcGVyYXRpb25zXCJdXG5lcnJvcltcIlJhaXNlXFxuZXhjZXB0aW9uXCJdXG4lJS1cbnNjaGVtYSAtLT4gY29udHJhY3RcbmlucHV0X2RhdGEgLS0-IGhhc19zY2hlbWFcbmNvbnRyYWN0IC0uLT4gaGFzX3NjaGVtYVxuaGFzX3NjaGVtYSAtLT4gfCBZZXMgfCBjb250aW51ZVxuaGFzX3NjaGVtYSAtLT4gfCBObyB8IGVycm9yXG4lJS1cbnN0eWxlIGVycm9yIGZpbGw6I0ZFRDdBQVxuc3R5bGUgY29udGludWUgZmlsbDojRENGQ0U3XG5zdHlsZSBzY2hlbWEgZmlsbDojZmZmIiwibWVybWFpZCI6bnVsbH0" /></p>

<p><em>Diagram showing data contracts as <strong>more granular specifications via &#8220;schema&#8221; testing</strong> being checked through contracts and raising an error if they aren&#8217;t met or continuing operations if they are met.</em></p>

<p>Sometimes we need greater specificity than what a data component can offer.
We can use data schema testing contracts in these cases.
The word &#8220;schema&#8221; here is used from the context of <a href="https://en.wikipedia.org/wiki/Database_schema">database schema</a>, but oftentimes these specifications are suitable well beyond solely databases (including database-like formats like dataframes).
While reuse and modularity are more limited with these cases, they can be helpful for efforts where precision is valued or necessary to accomplish your goals.
It&#8217;s worth mentioning that data schema and component testing tools often have many overlaps (meaning you can interchangeably use them to accomplish both tasks).</p>

<h3 id="data-schema-testing---pandera">Data Schema Testing - Pandera</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
Example of using the Pandera package
referenced with modifications from:
https://pandera.readthedocs.io/en/stable/try_pandera.html
"""</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">pandera</span> <span class="k">as</span> <span class="n">pa</span>
<span class="kn">from</span> <span class="nn">pandera.typing</span> <span class="kn">import</span> <span class="n">DataFrame</span><span class="p">,</span> <span class="n">Series</span>


<span class="c1"># define a schema
</span><span class="k">class</span> <span class="nc">Schema</span><span class="p">(</span><span class="n">pa</span><span class="p">.</span><span class="n">DataFrameModel</span><span class="p">):</span>
    <span class="n">item</span><span class="p">:</span> <span class="n">Series</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">pa</span><span class="p">.</span><span class="n">Field</span><span class="p">(</span><span class="n">isin</span><span class="o">=</span><span class="p">[</span><span class="s">"apple"</span><span class="p">,</span> <span class="s">"orange"</span><span class="p">],</span> <span class="nb">coerce</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">price</span><span class="p">:</span> <span class="n">Series</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="n">pa</span><span class="p">.</span><span class="n">Field</span><span class="p">(</span><span class="n">gt</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nb">coerce</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>


<span class="c1"># simulate invalid dataframe
</span><span class="n">invalid_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">from_records</span><span class="p">(</span>
    <span class="p">[{</span><span class="s">"item"</span><span class="p">:</span> <span class="s">"applee"</span><span class="p">,</span> <span class="s">"price"</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">},</span> 
     <span class="p">{</span><span class="s">"item"</span><span class="p">:</span> <span class="s">"orange"</span><span class="p">,</span> <span class="s">"price"</span><span class="p">:</span> <span class="o">-</span><span class="mi">1000</span><span class="p">}]</span>
<span class="p">)</span>


<span class="c1"># set a decorator on a function which will
# check the schema as a precondition
</span><span class="o">@</span><span class="n">pa</span><span class="p">.</span><span class="n">check_types</span><span class="p">(</span><span class="n">lazy</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">precondition_transform_data</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">DataFrame</span><span class="p">[</span><span class="n">Schema</span><span class="p">]):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"here"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">data</span>


<span class="c1"># precondition schema testing
</span><span class="k">try</span><span class="p">:</span>
    <span class="n">precondition_transform_data</span><span class="p">(</span><span class="n">invalid_data</span><span class="p">)</span>
<span class="k">except</span> <span class="n">pa</span><span class="p">.</span><span class="n">errors</span><span class="p">.</span><span class="n">SchemaErrors</span> <span class="k">as</span> <span class="n">schema_excs</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">schema_excs</span><span class="p">)</span>

<span class="c1"># inline or implied postcondition schema testing
</span><span class="k">try</span><span class="p">:</span>
    <span class="n">Schema</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="n">invalid_data</span><span class="p">)</span>
<span class="k">except</span> <span class="n">pa</span><span class="p">.</span><span class="n">errors</span><span class="p">.</span><span class="n">SchemaError</span> <span class="k">as</span> <span class="n">schema_exc</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">schema_exc</span><span class="p">)</span>
</code></pre></div></div>

<p><em>Example code leveraging Python package Pandera to perform various data schema contract validation.</em></p>

<p>DataFrame-like libraries like <a href="https://pandas.pydata.org/">Pandas</a> can verified using schema specification contracts through <a href="https://pandera.readthedocs.io/en/stable/index.html">Pandera</a> (see here for <a href="https://pandera.readthedocs.io/en/stable/supported_libraries.html#supported-dataframe-libraries">full DataFrame library support</a>).
Pandera helps define specific columns, column types, and also has some component-like features.
It leverages a Pythonic class specification, similar to <a href="https://docs.python.org/3/library/dataclasses.html">data classes</a> and <a href="https://docs.pydantic.dev/latest/concepts/models/">pydantic models</a>, making it potentially easier to use if you already understand Python and DataFrame-like libraries.
See the above example for a look into how Pandera may be used.</p>

<h3 id="data-schema-testing---json-schema">Data Schema Testing - JSON Schema</h3>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Example of using the jsonvalidate R package.</span><span class="w">
</span><span class="c1"># Referenced with modifications from:</span><span class="w">
</span><span class="c1"># https://docs.ropensci.org/jsonvalidate/articles/jsonvalidate.html</span><span class="w">

</span><span class="n">schema</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Hello World JSON Schema",
  "description": "An example",
  "type": "object",
  "properties": {
    "hello": {
      "description": "Provide a description of the property here",
      "type": "string"
    }
  },
  "required": [
    "hello"
  ]
}'</span><span class="w">

</span><span class="c1"># create a schema contract for data</span><span class="w">
</span><span class="n">validate</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">jsonvalidate</span><span class="o">::</span><span class="n">json_validator</span><span class="p">(</span><span class="n">schema</span><span class="p">,</span><span class="w"> </span><span class="n">engine</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"ajv"</span><span class="p">)</span><span class="w">

</span><span class="c1"># validate JSON using schema specification contract and invalid data</span><span class="w">
</span><span class="n">validate</span><span class="p">(</span><span class="s2">"{}"</span><span class="p">)</span><span class="w">

</span><span class="c1"># validate JSON using schema specification contract and valid data</span><span class="w">
</span><span class="n">validate</span><span class="p">(</span><span class="s2">"{'hello':'world'}"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><a href="https://json-schema.org/learn/getting-started-step-by-step">JSON Schema</a> provides a vocabulary way to validate schema contracts for JSON documents.
There are several implementations of the vocabulary, including <a href="https://github.com/python-jsonschema/jsonschema">Python package jsonschema</a>, and R package <a href="https://github.com/ropensci/jsonvalidate">jsonvalidate</a>.
Using these libraries allows you to define pre- or postcondition data schema contracts for your software work.
See above for an R based example of using this vocabulary to perform data schema testing.</p>

<h2 id="shift-left-data-testing">Shift-left Data Testing</h2>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCBsb2NhbCBbXCJEYXRhIFdvcmtmbG93IGFzIEhvYXJlIFRyaXBsZVwiXVxuZGlyZWN0aW9uIExSXG5zdWJncmFwaCBzcGFjZXIgW1wiIFwiXVxuc3ViZ3JhcGggcXVlc3Rpb24gW1wiRGF0YSBzb3VyY2UgY29uZGl0aW9uP1wiXVxuaW5wdXRfZGF0YVsoXCJJbnB1dCBEYXRhXFxuKFAgLSBwcmVjb25kaXRpb24pXCIpXVxuZW5kXG5lbmRcbnByb2Nlc3NfZGF0YVtcIkRhdGEgcHJvY2Vzc2luZ1xcbihDIC0gY29tbWFuZClcIl1cbm91dHB1dF9kYXRhWyhcIk91dHB1dCBEYXRhXFxuKFEgLSBwb3N0Y29uZGl0aW9uKVwiKV1cbmVuZFxuJSUtXG5pbnB1dF9kYXRhIC0tPiBwcm9jZXNzX2RhdGEgLS0-IG91dHB1dF9kYXRhXG4lJS1cbnN0eWxlIHF1ZXN0aW9uIGZpbGw6I2ZmZmZmZixzdHJva2U6I2ZmZmZmZjtcbnN0eWxlIHNwYWNlciBmaWxsOiNmZmZmZmYiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p>Earlier portions of this article have covered primarily data validation of command side-effects and postconditions.
This is commonplace in development where data sources usually are provided without the ability to validate their precondition or definition.
<a href="https://en.wikipedia.org/wiki/Shift-left_testing">Shift-left testing</a> is a movement which focuses on validating earlier in the lifecycle if and when possible to avoid downstream issues which might occur.</p>

<h3 id="shift-left-data-testing---data-version-control-dvc">Shift-left Data Testing - Data Version Control (DVC)</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG4lJS1cbmR2Y1soXCJEYXRhIFZlcnNpb25cXG5Db250cm9sIChEVkMpXCIpXVxudmVyc2lvbmVkX2RhdGFbKFwiVmVyc2lvbmVkXFxuRGF0YXNldHNcIildXG5kdmNfY2xpW1wiRFZDIENsaWVudFwiXVxuaW5wdXRfZGF0YVsoXCJJbnB1dCBEYXRhXFxuKFAgLSBwcmVjb25kaXRpb24pXCIpXVxuJSUtXG5kdmMgLS0-IHwgdmVyc2lvbiBkYXRhIHwgZHZjX2NsaVxudmVyc2lvbmVkX2RhdGEgLS0-IHwgYWN0dWFsIGRhdGEgfCBkdmNfY2xpXG5kdmNfY2xpIC0tPiB8IHRvIG1haW50YWluIHwgaW5wdXRfZGF0YSIsIm1lcm1haWQiOm51bGx9" /></p>

<p>Data sources undergoing frequent changes become difficult to use because we oftentimes don&#8217;t know <em>when</em> the data is from or what version it might be.
This information is sometimes added in the form of filename additions or an update datetime column in a table.
<a href="https://dvc.org/doc">Data Version Control (DVC)</a> is one tool which is specially purposed to address this challenge through <a href="https://en.wikipedia.org/wiki/Version_control">source control</a> techniques.
Data managed by DVC allows software to be built in such a way that version preconditions are validated before reaching data transformations (commands) or postconditions.</p>

<h3 id="shift-left-data-testing---flyway">Shift-left Data Testing - Flyway</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG4lJS1cbnNxbFtcIkRhdGFiYXNlIGFzIENvZGVcXG4oaW4gU1FMKVwiXVxuZmx5d2F5W1wiRmx5d2F5XCJdXG5pbnB1dF9kYXRhWyhcIklucHV0IERhdGFcXG4oUCAtIHByZWNvbmRpdGlvbilcIildXG4lJS1cbnNxbCAtLT4gfCBpbnN0cnVjdGlvbnMgZm9yIHwgZmx5d2F5XG5mbHl3YXkgLS0-IHwgdG8gYnVpbGQgfCBpbnB1dF9kYXRhXG4lJS1cbnN0eWxlIHNxbCBmaWxsOiNmZmZmZmYiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p>Database sources can leverage an idea nicknamed <a href="https://speakerdeck.com/tastapod/arent-we-forgetting-someone">&#8220;database as code&#8221;</a> (which builds on a similar idea about <a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">infrastructure as code</a>) to help declare the schema and other elements of a database in the same way one would code.
These ideas apply to both databases and also more broadly through DVC mentioned above (among other tools) via the concept <a href="https://en.wikipedia.org/wiki/Code_as_data">&#8220;data as code&#8221;</a>.
Implementing this idea has several advantages from source versioning, visibility, and replicability.
One tool which implements these ideas is <a href="https://github.com/flyway/flyway">Flyway</a> which can manage and implement SQL-based files as part of software data precondition validation.
A lightweight alternative to using Flyway is sometimes to include a SQL file which creates related database objects and becomes data documentation.</p>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="data-quality" /><category term="data-testing" /><category term="testing" /><category term="design-by-contract" /><category term="component-based-design" /><category term="hoare-logic" /><category term="data-as-code" /><summary type="html"><![CDATA[Tip of the Week: Data Quality Validation through Software Testing Techniques]]></summary></entry><entry><title type="html">Tip of the Week: Python Packaging as Publishing</title><link href="/set-website/preview/pr-25/2023/09/05/Python-Packaging-as-Publishing.html" rel="alternate" type="text/html" title="Tip of the Week: Python Packaging as Publishing" /><published>2023-09-05T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2023/09/05/Python-Packaging-as-Publishing</id><content type="html" xml:base="/set-website/preview/pr-25/2023/09/05/Python-Packaging-as-Publishing.html"><![CDATA[<h1 id="tip-of-the-week-python-packaging-as-publishing">Tip of the Week: Python Packaging as Publishing</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p>Python packaging is the craft of preparing for and reaching distribution of your Python work to wider audiences. Following conventions for packaging help your software work become more understandable, trustworthy, and connected (to others and their work). Taking advantage of common packaging practices also strengthens our collective superpowers: collaboration. This post will cover preparation aspects of packaging, readying software work for wider distribution.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong></p>

<p>Use Pythonic packaging tools and techniques to help avoid <a href="https://en.wikipedia.org/wiki/Software_rot">code decay</a> and unwanted <a href="https://en.wikipedia.org/wiki/Code_smell">code smells</a> and increase your development velocity. Increase understanding with unsurprising directory structures like those exhibited in <a href="https://github.com/pypa/sampleproject"><code class="language-plaintext highlighter-rouge">pypa/sampleproject</code></a> or <a href="https://github.com/scientific-python/cookie"><code class="language-plaintext highlighter-rouge">scientific-python/cookie</code></a>. Enhance trust by being authentic on source control systems like GitHub (<a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/about-your-profile">by customizing your profile</a>), staying up to date with the <a href="https://devguide.python.org/versions/">latest supported versions of Python</a>, and using security linting tools like <a href="https://github.com/PyCQA/bandit"><code class="language-plaintext highlighter-rouge">PyCQA/bandit</code></a> through <a href="https://cu-dbmi.github.io/set-website/2023/03/15/Automate-Software-Workflows-with-Github-Actions.html">visible + automated GitHub Actions ✅ checks</a>. Connect your projects to others using <a href="https://citation-file-format.github.io/"><code class="language-plaintext highlighter-rouge">CITATION.cff</code> files</a>, <a href="https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors"><code class="language-plaintext highlighter-rouge">CONTRIBUTING.md</code> files</a>, and using environment + packaging tools like <a href="https://python-poetry.org/docs/"><code class="language-plaintext highlighter-rouge">poetry</code></a> to help others reproduce the same results from your code.</p>

<h2 id="why-practice-packaging">Why practice packaging?</h2>

<figure class="figure">
  <a class="figure-image" aria-label="How are a page with some text and a book different?">
    <img src="/set-website/preview/pr-25/images/text-vs-book.png" style="
        width: auto;
        max-height: unset;
      " alt="How are a page with some text and a book different?" loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      How are a page with some text and a book different?

    </figcaption>
  
</figure>

<p>The practice of Python packaging efforts is similar to that of publishing a book. Consider how a bag of text is different from a book. How and <em>why</em> are these things different?</p>

<ul>
  <li>A book has commonly understood sequencing of content (i.e. copyright page, then title page, then body content pages&#8230;).</li>
  <li>A book often cites references and acknowledges other work explicitly.</li>
  <li>A book undergoes a manufacturing process which allows the text to be received in many places the same way.</li>
</ul>

<figure class="figure">
  <a class="figure-image" aria-label="Code undergoing packaging to achieve understanding, trust, and connection for an audience.">
    <img src="/set-website/preview/pr-25/images/python-packaging-to-audience.png" style="
        width: auto;
        max-height: unset;
      " alt="Code undergoing packaging to achieve understanding, trust, and connection for an audience." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Code undergoing packaging to achieve understanding, trust, and connection for an audience.

    </figcaption>
  
</figure>

<p>These can be thought of metaphors when it comes to packaging in Python. Books have a smell which sometimes comes from how it was stored, treated, or maintained. While there are pleasant book smells, they might also smell soggy from being left in the rain or stored without maintenance for too long. Just like books, software can sometimes have negative <a href="https://en.wikipedia.org/wiki/Code_smell">code smells</a> indicating a lack of care or less sustainable condition. Following good packaging practices helps to avoid unwanted code smells while increasing development velocity, maintainability of software through understandability, trustworthiness of the content, and connection to other projects.</p>

<div class="alert" style="--color: #d946ef">
  
  <i class="icon fa-solid fa-lightbulb"></i>
  <div class="alert-content">
    
<p>Note: these techniques can also work just as well for <a href="https://en.wikipedia.org/wiki/Inner_source">inner source</a> collaboration (private or proprietary development within organizations)! Don&#8217;t hesitate to use these on projects which may not be public facing in order to make development and maintenance easier (if only for you).</p>

  </div>
</div>

<div class="alert" style="--color: #6366f1">
  
  <i class="icon fa-solid fa-circle-question"></i>
  <div class="alert-content">
    
<p><strong>&#8220;Wait, what are Python packages?&#8221;</strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>my_package/
│   __init__.py
│   module_a.py
│   module_b.py
</code></pre></div></div>

<p>A Python <strong>package</strong> is a collection of modules (<code class="language-plaintext highlighter-rouge">.py</code> files) that usually include an &#8220;initialization file&#8221; <code class="language-plaintext highlighter-rouge">__init__.py</code>. This post will cover the craft of <strong>packaging</strong> which can include one or many <em>packages</em>.</p>

  </div>
</div>

<h2 id="understanding-common-directory-structures">Understanding: common directory structures</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>project_directory
├── README.md
├── LICENSE.txt
├── pyproject.toml
├── docs
│   └── <span class="nb">source</span>
│       └── index.md
├── src
│   └── package_name
│       └── __init__.py
│       └── module_a.py
└── tests
    └── __init__.py
    └── test_module_a.py
</code></pre></div></div>

<p>Python Packaging today generally assumes a specific directory design.
Following this convention generally improves the <strong>understanding</strong> of your code. We&#8217;ll cover each of these below.</p>

<h3 id="project-root-files">Project root files</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>project_directory
├── README.md
├── LICENSE.txt
├── pyproject.toml
│ ...
</code></pre></div></div>

<ul>
  <li>The <strong><code class="language-plaintext highlighter-rouge">README.md</code> file</strong> is a <a href="https://en.wikipedia.org/wiki/Markdown">markdown</a> file with documentation including project goals and other short notes about installation, development, or usage. The <code class="language-plaintext highlighter-rouge">README.md</code> file is akin to a book jacket blurb which quickly tells the audience what the book will be about.</li>
  <li>The <strong><code class="language-plaintext highlighter-rouge">LICENSE.txt</code> file</strong> is a text file which indicates licensing details for the project. It often includes information about how it may be used and protects the authors in disputes. The <code class="language-plaintext highlighter-rouge">LICENSE.txt</code> file can be thought of like a book&#8217;s copyright page. See <a href="https://choosealicense.com/">https://choosealicense.com/</a> for more details on selecting an open source license.</li>
  <li>The <strong><code class="language-plaintext highlighter-rouge">pyproject.toml</code> file</strong> is a Python-specific <a href="https://en.wikipedia.org/wiki/TOML">TOML</a> file which helps organize how the project is used and built for wider distribution. The <code class="language-plaintext highlighter-rouge">pyproject.toml</code> file is similar to a book&#8217;s table of contents, index, and printing or production specification.</li>
</ul>

<h3 id="project-sub-directories">Project sub-directories</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>project_directory
│ ...
├── docs
│   └── <span class="nb">source</span>
│       └── index.md
├── src
│   └── package_name
│       └── __init__.py
│       └── module_a.py
└── tests
    └── __init__.py
    └── test_module_a.py
</code></pre></div></div>

<ul>
  <li>The <strong><code class="language-plaintext highlighter-rouge">docs</code> directory</strong> is used for in-depth documentation and related documentation build code (for example, when building documentation websites, aka &#8220;docsites&#8221;). The <code class="language-plaintext highlighter-rouge">docs</code> directory includes information similar to a book&#8217;s &#8220;study guide&#8221;, providing content surrounding how to best make use of and understand the content found within.</li>
  <li>The <strong><code class="language-plaintext highlighter-rouge">src</code> directory</strong>  includes primary source code for use in the project. Python projects generally use a nested package directory with modules and sub-packages. The <code class="language-plaintext highlighter-rouge">src</code> directory is like a book&#8217;s body or general content (perhaps thinking of modules as chapters or sections of related ideas).</li>
  <li>The <strong><code class="language-plaintext highlighter-rouge">tests</code> directory</strong> includes testing code for validating functionality of code found in the <code class="language-plaintext highlighter-rouge">src</code> directory. The above follows <a href="https://docs.pytest.org/">pytest</a> conventions. The <code class="language-plaintext highlighter-rouge">tests</code> directory is for code which acts like a book&#8217;s early reviewers or editors, making sure that if you change things in <code class="language-plaintext highlighter-rouge">src</code> the impacts remain as expected.</li>
</ul>

<h3 id="common-directory-structure-examples">Common directory structure examples</h3>

<p>The Python directory structure described above can be witnessed in the wild from the following resources. These can serve as a great resource for starting or adjusting your own work.</p>

<ul>
  <li><a href="https://github.com/pypa/sampleproject"><code class="language-plaintext highlighter-rouge">pypa/sampleproject</code></a></li>
  <li><a href="https://github.com/scientific-python/cookie"><code class="language-plaintext highlighter-rouge">scientific-python/cookie</code></a></li>
  <li><a href="https://github.com/microsoft/python-package-template"><code class="language-plaintext highlighter-rouge">microsoft/python-package-template</code></a></li>
</ul>

<h2 id="trust-building-audience-confidence">Trust: building audience confidence</h2>

<figure class="figure">
  <a class="figure-image" aria-label="How much does your audience trust your work?.">
    <img src="/set-website/preview/pr-25/images/package-audience-trust.png" style="
        width: auto;
        max-height: unset;
      " alt="How much does your audience trust your work?." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      How much does your audience trust your work?.

    </figcaption>
  
</figure>

<p>Building an understandable body of content helps tremendously with audience trust. What else can we do to enhance project trust? The following elements can help improve an audience&#8217;s trust in packaged Python work.</p>

<h3 id="source-control-authenticity">Source control authenticity</h3>

<figure class="figure">
  <a class="figure-image" aria-label="Comparing the difference between a generic or anonymous user and one with greater authenticity.">
    <img src="/set-website/preview/pr-25/images/source-control-authenticity.png" style="
        width: auto;
        max-height: unset;
      " alt="Comparing the difference between a generic or anonymous user and one with greater authenticity." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Comparing the difference between a generic or anonymous user and one with greater authenticity.

    </figcaption>
  
</figure>

<p>Be authentic! Fill out your profile to help your audience know the author and why you do what you do. See here for <a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/about-your-profile">GitHub&#8217;s documentation on filling out your profile</a>. Doing this may seem irrelevant but can go a long way to making technical work more relatable.</p>

<ul>
  <li>Add a profile picture of yourself or something fun.</li>
  <li>Set your profile description to information which is both professionally accurate and unique to you.</li>
  <li>Show or link to work which you feel may be relevant or exciting to those in your audience.</li>
</ul>

<h3 id="staying-up-to-date-with-supported-python-releases">Staying up to date with supported Python releases</h3>

<figure class="figure">
  <a class="figure-image" aria-label="Major Python releases and their support status.">
    <img src="/set-website/preview/pr-25/images/python-version-status.png" style="
        width: auto;
        max-height: unset;
      " alt="Major Python releases and their support status." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Major Python releases and their support status.

    </figcaption>
  
</figure>

<p>Use Python versions which are supported (this changes over time).
Python versions which are end-of-life may be difficult to support and are a sign of <a href="https://en.wikipedia.org/wiki/Software_rot">code decay</a> for projects. Specify the version of Python which is compatiable with your project by using environment specifications such as <code class="language-plaintext highlighter-rouge">pyproject.toml</code> files and related packaging tools (more on this below).</p>

<ul>
  <li>See here for <a href="https://devguide.python.org/versions/">updated information on Python version status</a>.</li>
  <li>Staying up to date with supported releases oftentimes can result in performance or other similar benefits (later versions usually include improvements!).</li>
</ul>

<h3 id="security-linting-and-visible-checks-with-github-actions">Security linting and visible checks with GitHub Actions</h3>

<figure class="figure">
  <a class="figure-image" aria-label="Make an effort to inspect your package for known security issues.">
    <img src="/set-website/preview/pr-25/images/package-magnifying-glass.png" style="
        width: auto;
        max-height: unset;
      " alt="Make an effort to inspect your package for known security issues." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Make an effort to inspect your package for known security issues.

    </figcaption>
  
</figure>

<p>Use security vulnerability linters to help prevent undesirable or risky processing for your audience. Doing this both practical to avoid issues and conveys that you care about those using your package!</p>

<ul>
  <li><a href="https://github.com/PyCQA/bandit"><code class="language-plaintext highlighter-rouge">PyCQA/bandit</code>`</a>: checks Python code</li>
  <li><a href="https://github.com/pyupio/safety"><code class="language-plaintext highlighter-rouge">pyupio/safety</code>`</a>: checks Python dependencies</li>
  <li><a href="https://github.com/gitleaks/gitleaks"><code class="language-plaintext highlighter-rouge">gitleaks</code></a>: checks for sensitive passwords, keys, or tokens</li>
</ul>

<figure class="figure">
  <a class="figure-image" aria-label="The green checkmark from successful GitHub Actions runs can offer a sense of reassurance to your audience.">
    <img src="/set-website/preview/pr-25/images/gh-actions-checkmark.png" style="
        width: auto;
        max-height: unset;
      " alt="The green checkmark from successful GitHub Actions runs can offer a sense of reassurance to your audience." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      The green checkmark from successful GitHub Actions runs can offer a sense of reassurance to your audience.

    </figcaption>
  
</figure>

<p>Combining GitHub actions with security linters and tests from your software validation suite can add an observable ✅ for your project.
This provides the audience with a sense that you&#8217;re transparently testing and sharing results of those tests.</p>

<ul>
  <li>See <a href="https://docs.github.com/en/actions">GitHub&#8217;s documentation on this topic for more information</a>.</li>
  <li>See also <a href="https://cu-dbmi.github.io/set-website/2023/03/15/Automate-Software-Workflows-with-Github-Actions.html">the DBMI Software Engineering Team&#8217;s blog post: &#8220;Automate Software Workflows with Github Actions&#8221;</a></li>
</ul>

<h2 id="connection-personal-and-inter-package-relationships">Connection: personal and inter-package relationships</h2>

<figure class="figure">
  <a class="figure-image" aria-label="How does your package connect with other work and people?">
    <img src="/set-website/preview/pr-25/images/package-connections.png" style="
        width: auto;
        max-height: unset;
      " alt="How does your package connect with other work and people?" loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      How does your package connect with other work and people?

    </figcaption>
  
</figure>

<p>Understandability and trust set the stage for your project&#8217;s <strong>connection</strong> to other people and projects. What can we do to facilitate connection with our project? Use the following techniques to help enhance your project&#8217;s connection to others and their work.</p>

<h3 id="acknowledging-authors-and-referenced-work-with-citationcff">Acknowledging authors and referenced work with CITATION.cff</h3>

<figure class="figure">
  <a class="figure-image" aria-label="figure link">
    <img src="/set-website/preview/pr-25/images/citation-cff-icon.png" style="
        width: auto;
        max-height: unset;
      " alt="figure image" loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
</figure>

<p>Add a <strong><code class="language-plaintext highlighter-rouge">CITATION.cff</code></strong> file to your project root in order to describe project relationships and acknowledgements in a standardized way. The <a href="https://citation-file-format.github.io/">CFF format</a> is also <a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files">GitHub compatible</a>, making it easier to cite your project.</p>

<ul>
  <li>This is similar to a book&#8217;s credits, acknowledgements, dedication, and author information sections.</li>
  <li>See here for a <a href="https://citation-file-format.github.io/cff-initializer-javascript/#/"><code class="language-plaintext highlighter-rouge">CITATION.cff</code> file generator (and updater)</a>.</li>
</ul>

<h3 id="reaching-collaborators-using-contributingmd">Reaching collaborators using CONTRIBUTING.md</h3>

<figure class="figure">
  <a class="figure-image" aria-label="CONTRIBUTING.md documents can help you collaborate with others.">
    <img src="/set-website/preview/pr-25/images/contributing-file-with-handshake.png" style="
        width: auto;
        max-height: unset;
      " alt="CONTRIBUTING.md documents can help you collaborate with others." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      CONTRIBUTING.md documents can help you collaborate with others.

    </figcaption>
  
</figure>

<p>Provide a <strong><code class="language-plaintext highlighter-rouge">CONTRIBUTING.md</code></strong> file to your project root so as to make clear support details, development guidance, code of conduct, and overall documentation surrounding how the project is governed.</p>

<ul>
  <li>See GitHub&#8217;s documentation on <a href="https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors">&#8220;Setting guidelines for repository contributors&#8221;</a></li>
  <li>See opensource.guide&#8217;s section on <a href="https://opensource.guide/starting-a-project/#writing-your-contributing-guidelines">&#8220;Writing your contributing guidelines&#8221;</a></li>
</ul>

<h3 id="environment-management-reproducibility-as-connected-project-reality">Environment management reproducibility as connected project reality</h3>

<figure class="figure">
  <a class="figure-image" aria-label="Environment and packaging managers can help you connect with your audience.">
    <img src="/set-website/preview/pr-25/images/environment-management-tooling.png" style="
        width: auto;
        max-height: unset;
      " alt="Environment and packaging managers can help you connect with your audience." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Environment and packaging managers can help you connect with your audience.

    </figcaption>
  
</figure>

<p>Code without an environment specification is difficult to run in a consistent way. This can lead to &#8220;works on my machine&#8221; scenarios where different things happen for different people, reducing the chance that people can connect with a shared reality for how your code should be used.</p>

<blockquote>
  <p><strong>&#8220;But why do we have to switch the way we do things?&#8221;</strong>
<em>We&#8217;ve always been switching approaches (software approaches evolve over time)!</em> A brief history of Python environment and packaging tooling:</p>

  <ol>
    <li><strong><code class="language-plaintext highlighter-rouge">distutils</code>, <code class="language-plaintext highlighter-rouge">easy_install</code> + <code class="language-plaintext highlighter-rouge">setup.py</code></strong> <br />(primarily used during 1990&#8217;s - early 2000&#8217;s)</li>
    <li><strong><code class="language-plaintext highlighter-rouge">pip</code>, <code class="language-plaintext highlighter-rouge">setup.py</code> + <code class="language-plaintext highlighter-rouge">requirements.txt</code></strong> <br />(primarily used during late 2000&#8217;s - early 2010&#8217;s)</li>
    <li><strong><code class="language-plaintext highlighter-rouge">poetry</code> + <code class="language-plaintext highlighter-rouge">pyproject.toml</code></strong> <br />(began use around late 2010&#8217;s - ongoing)</li>
  </ol>
</blockquote>

<h4 id="using-python-poetry-for-environment-and-packaging-management">Using Python <code class="language-plaintext highlighter-rouge">poetry</code> for environment and packaging management</h4>

<figure class="figure">
  <a class="figure-image" aria-label="figure link">
    <img src="/set-website/preview/pr-25/images/poetry-icon.png" style="
        width: auto;
        max-height: unset;
      " alt="figure image" loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
</figure>

<p><a href="https://github.com/python-poetry/poetry">Poetry</a> is one Pythonic environment and packaging manager which can help increase reproducibility using <code class="language-plaintext highlighter-rouge">pyproject.toml</code> files. It&#8217;s one of many other alternatives such as <a href="https://hatch.pypa.io/latest/"><code class="language-plaintext highlighter-rouge">hatch</code></a> and <a href="https://pipenv.pypa.io/en/latest/"><code class="language-plaintext highlighter-rouge">pipenv</code></a>.</p>

<h5 id="poetry-directory-structure-template-use"><code class="language-plaintext highlighter-rouge">poetry</code> directory structure template use</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user@machine % poetry new <span class="nt">--name</span><span class="o">=</span>package_name <span class="nt">--src</span> <span class="nb">.</span>
Created package package_name <span class="k">in</span> <span class="nb">.</span>

user@machine % tree <span class="nb">.</span>
<span class="nb">.</span>
├── README.md
├── pyproject.toml
├── src
│   └── package_name
│       └── __init__.py
└── tests
    └── __init__.py
</code></pre></div></div>

<p>After installation, Poetry gives us the ability to initialize a directory structure similar to what we presented earlier by using the <a href="https://python-poetry.org/docs/cli/#new"><code class="language-plaintext highlighter-rouge">poetry new ...</code> command</a>. If you&#8217;d like a more interactive version of the same, use the <a href="https://python-poetry.org/docs/cli/#init"><code class="language-plaintext highlighter-rouge">poetry init</code> command</a> to fill out various sections of your project with detailed information.</p>

<h5 id="poetry-format-for-project-pyprojecttoml"><code class="language-plaintext highlighter-rouge">poetry</code> format for project <code class="language-plaintext highlighter-rouge">pyproject.toml</code></h5>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># pyproject.toml</span>
<span class="nn">[tool.poetry]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"package-name"</span>
<span class="py">version</span> <span class="p">=</span> <span class="s">"0.1.0"</span>
<span class="py">description</span> <span class="p">=</span> <span class="s">""</span>
<span class="py">authors</span> <span class="p">=</span> <span class="p">[</span><span class="s">"username &lt;email@address&gt;"</span><span class="p">]</span>
<span class="py">readme</span> <span class="p">=</span> <span class="s">"README.md"</span>
<span class="py">packages</span> <span class="p">=</span> <span class="py">[{include</span> <span class="p">=</span> <span class="s">"package_name"</span><span class="p">,</span> <span class="py">from</span> <span class="p">=</span> <span class="s">"src"</span><span class="err">}]</span>

<span class="nn">[tool.poetry.dependencies]</span>
<span class="py">python</span> <span class="p">=</span> <span class="s">"^3.9"</span>

<span class="nn">[build-system]</span>
<span class="py">requires</span> <span class="p">=</span> <span class="nn">["poetry-core"]</span>
<span class="py">build-backend</span> <span class="p">=</span> <span class="s">"poetry.core.masonry.api"</span>
</code></pre></div></div>

<p>Using the <code class="language-plaintext highlighter-rouge">poetry new ...</code> command also initializes the content of our <a href="https://python-poetry.org/docs/pyproject#the-pyprojecttoml-file"><code class="language-plaintext highlighter-rouge">pyproject.toml</code> file with opinionated details</a> (following the recommendation from earlier in the article regarding declared Python version specification).</p>

<h5 id="poetry-dependency-management"><code class="language-plaintext highlighter-rouge">poetry</code> dependency management</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user@machine % poetry add pandas

Creating virtualenv package-name-1STl06GY-py3.9 <span class="k">in</span> /pypoetry/virtualenvs
Using version ^2.1.0 <span class="k">for </span>pandas

...

Writing lock file
</code></pre></div></div>

<p>We can add dependencies directly using the <a href="https://python-poetry.org/docs/cli/#add"><code class="language-plaintext highlighter-rouge">poetry add ...</code> command</a>. This command also provides the possibility of using a <code class="language-plaintext highlighter-rouge">group</code> flag (for example <code class="language-plaintext highlighter-rouge">poetry add pytest --group testing</code>) to help organize and distinguish multiple sets of dependencies.</p>

<ul>
  <li>A local virtual environment is managed for us automatically.</li>
  <li><a href="https://python-poetry.org/docs/libraries/#lock-file">A <code class="language-plaintext highlighter-rouge">poetry.lock</code> file</a> is written when the dependencies are installed to help ensure the version you installed today will be what&#8217;s used on other machines.</li>
  <li>The <code class="language-plaintext highlighter-rouge">poetry.lock</code> file helps ensure reproducibility when dealing with dependency version ranges (where otherwise we may end up using different versions which match the dependency ranges but observe different results).</li>
</ul>

<h5 id="running-python-from-the-context-of-poetry-environments">Running Python from the context of <code class="language-plaintext highlighter-rouge">poetry</code> environments</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% poetry run python <span class="nt">-c</span> <span class="s2">"import pandas; print(pandas.__version__)"</span>

2.1.0
</code></pre></div></div>

<p>We can invoke the virtual environment directly using the <a href="https://python-poetry.org/docs/cli/#run"><code class="language-plaintext highlighter-rouge">poetry run ...</code> command</a>.</p>

<ul>
  <li>This allows us to quickly run code through the context of the project&#8217;s environment.</li>
  <li>Poetry can automatically switch between multiple environments based on the local directory structure.</li>
  <li>We can also the environment as a &#8220;shell&#8221; (similar to virtualenv&#8217;s <code class="language-plaintext highlighter-rouge">activate</code>) with the <a href="https://python-poetry.org/docs/cli/#shell"><code class="language-plaintext highlighter-rouge">poetry shell</code> command</a> which enables us to leverage a dynamic session in the context of the <code class="language-plaintext highlighter-rouge">poetry</code> environment.</li>
</ul>

<h5 id="building-source-code-with-poetry">Building source code with <code class="language-plaintext highlighter-rouge">poetry</code></h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% pip <span class="nb">install </span>git+https://github.com/project/package_name
</code></pre></div></div>

<p>Even if we don&#8217;t reach wider distribution on PyPI or elsewhere, source code managed by <code class="language-plaintext highlighter-rouge">pyproject.toml</code> and <code class="language-plaintext highlighter-rouge">poetry</code> can be used for &#8220;manual&#8221; distribution (with reproducible results) from GitHub repositories. When we&#8217;re ready to distribute pre-built packages on other networks we can also use the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% poetry build

Building package-name <span class="o">(</span>0.1.0<span class="o">)</span>
  - Building sdist
  - Built package_name-0.1.0.tar.gz
  - Building wheel
  - Built package_name-0.1.0-py3-none-any.whl
</code></pre></div></div>

<p>Poetry readies source-code and pre-compiled versions of our code for distribution platforms like PyPI by using the <a href="https://python-poetry.org/docs/cli/#build"><code class="language-plaintext highlighter-rouge">poetry build ...</code> command</a>. We&#8217;ll cover more on these files and distribution steps with a later post!</p>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="Python" /><category term="packaging" /><category term="publishing" /><category term="software-design" /><category term="understandability" /><category term="environment-management" /><summary type="html"><![CDATA[Tip of the Week: Python Packaging as Publishing]]></summary></entry><entry><title type="html">Tip of the Week: Using Python and Anaconda with the Alpine HPC Cluster</title><link href="/set-website/preview/pr-25/2023/07/07/Using-Python-and-Anaconda-with-the-Alpine-HPC-Cluster.html" rel="alternate" type="text/html" title="Tip of the Week: Using Python and Anaconda with the Alpine HPC Cluster" /><published>2023-07-07T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2023/07/07/Using-Python-and-Anaconda-with-the-Alpine-HPC-Cluster</id><content type="html" xml:base="/set-website/preview/pr-25/2023/07/07/Using-Python-and-Anaconda-with-the-Alpine-HPC-Cluster.html"><![CDATA[<h1 id="tip-of-the-week-using-python-and-anaconda-with-the-alpine-hpc-cluster">Tip of the Week: Using Python and Anaconda with the Alpine HPC Cluster</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p>This post is intended to help demonstrate the use of Python on <a href="https://curc.readthedocs.io/en/latest/clusters/alpine/index.html">Alpine</a>, a <a href="https://en.wikipedia.org/wiki/High-performance_computing">High Performance Compute (HPC) cluster</a> hosted by the <a href="https://www.colorado.edu/rc/">University of Colorado Boulder&#8217;s Research Computing</a>.
We use Python here by way of <a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">Anaconda</a> environment management to run code on Alpine.
This readme will cover a background on the technologies and how to use the contents of <a href="https://github.com/CU-DBMI/example-hpc-alpine-python">an example project repository</a> as though it were a project you were working on and wanting to run on Alpine.</p>

<!-- excerpt end -->

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCByZXBvW1wi8J-TpiBTb2Z0d2FyZSByZXBvc2l0b3J5PGJyLz48YnIvPlwiXVxuZGlyZWN0aW9uIExSXG5ydW5zY3JpcHRbXCLwn5OEIFJ1biBzY3JpcHQ8YnIvPjxici8-XCJdXG5zdWJncmFwaCBjb25kYWVudltcIvCfjJAgQW5hY29uZGEgZW52aXJvbm1lbnQ8YnIvPjxici8-XCJdXG5weXRob25jb2RlW1wi8J-ThCBQeXRob24gY29kZTxici8-PGJyLz5cIl1cbmVuZFxuJSUtXG5lbmRcbnN1YmdyYXBoIGFscGluZVtcIvCflqXvuI8gQWxwaW5lPGJyLz48YnIvPlwiXVxuc3ViZ3JhcGggc3BhY2VyMVtcIiBcIl1cbnN1YmdyYXBoIHNwYWNlcjJbXCLimpnvuI_impnvuI_impnvuI88YnIvPjxici8-XCJdXG5lbmRcbmVuZFxuZW5kXG4lJS1cbnJlcG8gLS0-IHwgcHJvY2VzcyBvbiB8IGFscGluZVxuJSUtXG5zdHlsZSBjb25kYWVudiBmaWxsOiNGRUYzQzcsc3Ryb2tlOiNEOTc3MDY7XG5zdHlsZSByZXBvIGZpbGw6I2ZmZmZmZixzdHJva2U6IzQ0NDQ0NDtcbnN0eWxlIGFscGluZSBmaWxsOiNmZmZmZmYsc3Ryb2tlOiM0NDQ0NDQ7XG5zdHlsZSBzcGFjZXIxIGZpbGw6I2ZmZmZmZixzdHJva2U6I2ZmZmZmZjtcbnN0eWxlIHNwYWNlcjIgZmlsbDojZmZmZmZmLHN0cm9rZTojZmZmZmZmOyIsIm1lcm1haWQiOm51bGx9" /></p>

<p><em>Diagram showing a repository&#8217;s work as being processed on Alpine.</em></p>

<h2 id="table-of-contents">Table of Contents</h2>

<ol>
  <li><a href="#background"><strong>Background:</strong></a> here we cover the background of Alpine and related technologies.</li>
  <li><a href="#implementation"><strong>Implementation:</strong></a> in this section we use the contents of <a href="https://github.com/CU-DBMI/example-hpc-alpine-python">an example project repository</a> on Alpine.</li>
</ol>

<h2 id="background">Background</h2>

<h3 id="why-would-i-use-alpine">Why would I use Alpine?</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCBhbHBpbmVbXCLwn5al77iPIEFscGluZTxici8-PGJyLz5cIl1cbmRpcmVjdGlvbiBUQlxuc3ViZ3JhcGggcmVzb3VyY2VzW1wi8J-SqiBDb21wdXRlIFJlc291cmNlczxici8-PGJyLz5cIl1cbmNoZWNrMVtcIuKchTxici8-PGJyLz5cIl1cbmVuZFxuc3ViZ3JhcGggdGltZVtcIvCflZEgTG9uZy1ydW5uaW5nIEpvYnM8YnIvPjxici8-XCJdXG5jaGVjazJbXCLinIU8YnIvPjxici8-XCJdXG5lbmRcbnN1YmdyYXBoIGNvbGxhYm9yYXRpb25zW1wi8J-RpSBDb2xsYWJvcmF0aW9uczxici8-PGJyLz5cIl1cbmNoZWNrM1tcIuKchTxici8-PGJyLz5cIl1cbmVuZFxuZW5kXG4lJS1cbnN0eWxlIGFscGluZSBmaWxsOiNmZmZmZmYsc3Ryb2tlOiM0NDQ0NDQ7XG5zdHlsZSBjaGVjazEgZmlsbDojRDFGQUU1LHN0cm9rZTojRDFGQUU1O1xuc3R5bGUgY2hlY2syIGZpbGw6I0QxRkFFNSxzdHJva2U6I0QxRkFFNTtcbnN0eWxlIGNoZWNrMyBmaWxsOiNEMUZBRTUsc3Ryb2tlOiNEMUZBRTU7XG5zdHlsZSBhbHBpbmUgZmlsbDojZmZmZmZmLHN0cm9rZTojNDQ0NDQ0OyIsIm1lcm1haWQiOm51bGx9" /></p>

<p><em>Diagram showing common benefits of Alpine and HPC clusters.</em></p>

<p>Alpine is a <a href="https://en.wikipedia.org/wiki/High-performance_computing">High Performance Compute (HPC) cluster</a>.
HPC environments provide shared computer hardware resources like <a href="https://en.wikipedia.org/wiki/Computer_memory">memory</a>, <a href="https://en.wikipedia.org/wiki/Central_processing_unit">CPU</a>, <a href="https://en.wikipedia.org/wiki/Graphics_processing_unit">GPU</a> or others to run performance-intensive work.
Reasons for using Alpine might include:</p>

<ul>
  <li><strong>Compute resources:</strong> Leveraging otherwise cost-prohibitive amounts of memory, CPU, GPU, etc. for processing data.</li>
  <li><strong>Long-running jobs:</strong> Completing long-running processes which may take hours or days to complete.</li>
  <li><strong>Collaborations:</strong> Sharing a single implementation environment for reproducibility within a group (avoiding &#8220;works on my machine&#8221; inconsistency issues).</li>
</ul>

<h3 id="how-does-alpine-work">How does Alpine work?</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG51c2Vyc1tcIvCfkaUgVXNlcnM8YnIvPjxici8-XCJdXG5zdWJncmFwaCBhbHBpbmVbXCLwn5al77iPIEFscGluZTxici8-PGJyLz5cIl1cbnNsdXJtW1wi8J-Xk--4jyBTbHVybVwiXVxuc3ViZ3JhcGggbG9naW5ub2Rlc1tcIvCflJEgTG9naW4gbm9kZShzKTxici8-PGJyLz5cIl1cbmFjb21waWxlW1wi8J-ThCBhY29tcGlsZTxici8-PGJyLz5cIl1cbnNsdXJtY21kW1wi4oyo77iPIFNsdXJtIGNtZCdzPGJyLz48YnIvPlwiXVxuZW5kXG5zdWJncmFwaCBjb21wdXRlbm9kZXNbXCLimpnvuI8gQ29tcHV0ZSBub2RlKHMpPGJyLz48YnIvPlwiXVxuaGFyZHdhcmVbXCLimpnvuI8gQ29tcHV0ZVxcblJlc291cmNlczxici8-PGJyLz5cIl1cbm1vZHVsZXNbXCLwn5K_IFNvZnR3YXJlIHZpYVxcbm1vZHVsZXMgcGtnPGJyLz48YnIvPlwiXVxuZW5kXG5zdWJncmFwaCBzdG9yYWdlW1wi8J-TgiBTdG9yYWdlPGJyLz48YnIvPlwiXVxubG9jYWxzdG9yYWdlW1wi8J-TgSBMb2NhbCBTdG9yYWdlXFxuKHNvbWV0aW1lcyB0ZW1wb3JhcnkpPGJyLz48YnIvPlwiXVxuZW5kXG5lbmRcbnJlbW90ZXN0b3JhZ2VbXCLwn5OBIEV4dGVybmFsIFN0b3JhZ2VcXG4odXNlciBzcGVjaWZpZWQgLyBjb25maWd1cmVkKTxici8-PGJyLz5cIl1cbiUlLVxudXNlcnMgLS0-IHxwcmVjb25maWd1cmVkXFxuU2x1cm0gYWNjZXNzfCBhY29tcGlsZSAtLT4gc2x1cm1cbnVzZXJzIC0tPiB8ZGlyZWN0IGFjY2VzcyB8IHNsdXJtY21kIC0tPiBzbHVybVxuc2x1cm0gLS0-IHxzY2hlZHVsZXNcXG5zaGFyZWQgIHVzZSBvZnwgaGFyZHdhcmVcbnNsdXJtIC0tPiB8cHJvdmlkZXNcXG5hY2Nlc3MgdG98IG1vZHVsZXMgLS0-IHx3aGljaCBtYXlcXG4gbGV2ZXJhZ2V8IGhhcmR3YXJlXG5oYXJkd2FyZSAtLT4gfG1heSBkZWxpdmVyXFxucmVzdWx0cyB0b3wgbG9jYWxzdG9yYWdlXG5oYXJkd2FyZSAtLT4gfG9yIGRlbGl2ZXJcXG5yZXN1bHRzIHRvfCByZW1vdGVzdG9yYWdlXG4lJS1cbnN0eWxlIGFscGluZSBmaWxsOiNmZmZmZmYsc3Ryb2tlOiM0NDQ0NDQ7XG5zdHlsZSBzbHVybSBmaWxsOiNGMEY5RkYsc3Ryb2tlOiMwNzU5ODU7IiwibWVybWFpZCI6bnVsbH0" /></p>

<p><em>Diagram showing high-level user workflow and Alpine components.</em></p>

<p>Alpine&#8217;s compute resources are used through compute nodes in a system called <a href="https://github.com/SchedMD/slurm">Slurm</a>.
Slurm is a system that a large number of users to run jobs on a cluster of computers; the system figures out how to use all the computers in the cluster to execute all the user&#8217;s jobs fairly (i.e., giving each user approximately equal time and resources on the cluster). A <em>job</em> is a request to run something, e.g. a bash script or a program, along with specifications about how much RAM and CPU it needs, how long it can run, and how it should be executed.</p>

<p>Slurm&#8217;s role in general is to take in a job (submitted via the <code class="language-plaintext highlighter-rouge">sbatch</code> command) and put it into a <em>queue</em> (also called a &#8220;partition&#8221; in Slurm). For each job in the queue, Slurm constantly tries to find a computer in the cluster with enough resources to run that job, then when an available computer is found runs the program the job specifies on that computer. As the program runs, Slurm records its output to files and finally reports the program&#8217;s exit status (either completed or failed) back to the job manager.</p>

<p>Importantly, jobs can either be marked as <em>interactive</em> or <em>batch</em>. When you submit an interactive job, <code class="language-plaintext highlighter-rouge">sbatch</code> will pause while waiting for the job to start and then connect you to the program, so you can see its output and enter commands in real time. On the other hand, a <em>batch</em> job will return immediately; you can see the progress of your job using <code class="language-plaintext highlighter-rouge">squeue</code>, and you can typically see the output of the job in the folder from which you ran <code class="language-plaintext highlighter-rouge">sbatch</code> unless you specify otherwise.
Data for or from Slurm work may be stored temporarily on local storage or on user-specific external (remote) storage.</p>

<div class="alert" style="--color: #6366f1">
  
  <i class="icon fa-solid fa-circle-question"></i>
  <div class="alert-content">
    
<p><strong>Wait, what are &#8220;nodes&#8221;?</strong></p>

<p>A simplified way to understand the architecture of Slurm on Alpine is through login and compute &#8220;nodes&#8221; (computers).
Login nodes act as a place to prepare and submit jobs which will be completed on compute nodes. Login nodes are never used to execute Slurm jobs, whereas compute nodes are exclusively accessed via a job.
Login nodes have limited resource access and are not recommended for running procedures.</p>

  </div>
</div>

<p>One can interact with Slurm on Alpine by use of <a href="https://curc.readthedocs.io/en/latest/clusters/alpine/examples.html">Slurm interfaces and directives</a>.
A quick way of accessing Alpine resources is through the use of the <code class="language-plaintext highlighter-rouge">acompile</code> command, which starts an interactive job on a compute node with some typical default parameters for the job. Since <code class="language-plaintext highlighter-rouge">acompile</code> requests very modest resources (1 hour and 1 CPU core at the time of writing), you&#8217;ll typically quickly be connected to a compute node. For more intensive or long-lived interactive jobs, consider using <code class="language-plaintext highlighter-rouge">sinteractive</code>, which allows for more customization: <a href="https://curc.readthedocs.io/en/latest/running-jobs/interactive-jobs.html">Interactive Jobs</a>.
One can also access Slurm directly through <a href="https://slurm.schedmd.com/quickstart.html#commands">various commands</a> on Alpine.</p>

<p>Many common software packages are available through the <a href="https://github.com/cea-hpc/modules">Modules package</a> on Alpine (<a href="https://curc.readthedocs.io/en/latest/compute/modules.html">UCB RC documentation: The Modules System</a>).</p>

<h3 id="how-does-slurm-work">How does Slurm work?</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCBhbHBpbmVbXCLwn5al77iPIEFscGluZTxici8-PGJyLz5cIl1cbmRpcmVjdGlvbiBMUlxuc2NyaXB0W1wi8J-ThCBKb2Igc2NyaXB0PGJyLz48YnIvPlwiXVxuc3ViZ3JhcGggc2x1cm1bXCLwn5eT77iPIFNsdXJtPGJyLz48YnIvPlwiXVxucXVldWVbXCLwn5WRIFF1ZXVlPGJyLz48YnIvPlwiXVxucHJvY2Vzc2luZ1tcIuKame-4jyBQcm9jZXNzaW5nPGJyLz48YnIvPlwiXVxuY29tcGxldGlvbltcIuKchSBDb21wbGV0aW9uXFxuKG9yIGNhbmNlbGxhdGlvbik8YnIvPjxici8-XCJdXG5lbmRcbmVuZFxuJSUtXG5zY3JpcHQgLS0-IHwgU3VibWl0IGpvYlxcbnRvIFNsdXJtIHwgcXVldWVcbnF1ZXVlIC0tPiB8IFNjaGVkdWxlZCBqb2JcXG5pcyBwcm9jZXNzZWQgfCBwcm9jZXNzaW5nXG5wcm9jZXNzaW5nIC0tPiB8IFByb2Nlc3NpbmdcXG5jb21wbGV0ZXMgfCBjb21wbGV0aW9uXG5xdWV1ZSAtLT4gfCBDYW5jZWxsYXRpb24gd2l0aG91dFxcbnByb2Nlc3Npbmd8IGNvbXBsZXRpb25cbiUlLVxuc3R5bGUgYWxwaW5lIGZpbGw6I2ZmZmZmZixzdHJva2U6IzQ0NDQ0NDtcbnN0eWxlIHNsdXJtIGZpbGw6I0YwRjlGRixzdHJva2U6IzA3NTk4NTsiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p><em>Diagram showing how Slurm generally works.</em></p>

<p>Using Alpine effectively involves knowing how to leverage Slurm.
A simplified way to understand how Slurm works is through the following sequence.
Please note that some steps and additional complexity are omitted for the purposes of providing a basis of understanding.</p>

<ol>
  <li><strong>Create a job script:</strong> build a script which will configure and run procedures related to the work you seek to accomplish on the HPC cluster.</li>
  <li><strong>Submit job to Slurm:</strong> ask Slurm to run a set of commands or procedures.</li>
  <li><strong>Job queue:</strong> Slurm will queue the submitted job alongside others (recall that the HPC cluster is a shared resource), providing information about progress as time goes on.</li>
  <li><strong>Job processing:</strong> Slurm will run the procedures in the job script as scheduled.</li>
  <li><strong>Job completion or cancellation:</strong> submitted jobs eventually may reach completion or cancellation states with saved information inside Slurm regarding what happened.</li>
</ol>

<h3 id="how-do-i-store-data-on-alpine">How do I store data on Alpine?</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG51c2Vyc1tcIvCfkaUgVXNlcnM8YnIvPjxici8-XCJdXG5zdWJncmFwaCBhbHBpbmVbXCLwn5al77iPIEFscGluZTxici8-PGJyLz5cIl1cbnNsdXJtW1wi8J-Xk--4jyBTbHVybTxici8-PGJyLz5cIl1cbnByb2Nlc3Nqb2JzW1wiUHJvY2Vzc2VkIGpvYnM8YnIvPjxici8-XCJdXG5zdWJncmFwaCBzdG9yYWdlW1wi8J-TgiBTdG9yYWdlPGJyLz48YnIvPlwiXVxubG9jYWxzdG9yYWdlW1wi8J-TgSBMb2NhbCBTdG9yYWdlXFxuKHNvbWV0aW1lcyB0ZW1wb3JhcnkpPGJyLz48YnIvPlwiXVxuZW5kXG5lbmRcbnJlbW90ZXN0b3JhZ2VbXCLwn5OBIEV4dGVybmFsIFN0b3JhZ2VcXG4odXNlciBzcGVjaWZpZWQgLyBjb25maWd1cmVkKTxici8-PGJyLz5cIl1cbiUlLVxudXNlcnMgLS0-IHxydW4gdGhlaXJcXG53b3JrIHdpdGh8IHNsdXJtXG5zbHVybSAtLT4gfHJ1bnMgY29kZXwgcHJvY2Vzc2pvYnNcbnByb2Nlc3Nqb2JzIC0tPiB8bWF5IGRlbGl2ZXJcXG5yZXN1bHRzIHRvfCBsb2NhbHN0b3JhZ2VcbnByb2Nlc3Nqb2JzIC0tPiB8b3IgZGVsaXZlclxcbnJlc3VsdHMgdG98IHJlbW90ZXN0b3JhZ2VcbiUlLVxuc3R5bGUgYWxwaW5lIGZpbGw6I2ZmZmZmZixzdHJva2U6IzQ0NDQ0NDtcbnN0eWxlIHNsdXJtIGZpbGw6I0YwRjlGRixzdHJva2U6IzA3NTk4NTsiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p>Data used or produced by your processed jobs on Alpine may use a number of different data storage locations.
Be sure to follow <a href="https://curc.readthedocs.io/en/latest/additional-resources/policies.html#acceptable-data-storage-and-use">the Acceptable data storage and use policies of Alpine</a>, avoiding the use of certain sensitive information and other items.
These may be distinguished in two ways:</p>

<ol>
  <li>
    <p><strong>Alpine local storage (sometimes temporary):</strong> Alpine provides a number of temporary data storage locations for accomplishing your work.
⚠️ <em>Note: some of these locations may be periodically purged and are not a suitable location for long-term data hosting (<a href="https://curc.readthedocs.io/en/latest/additional-resources/policies.html#scratch-file-purge">see here for more information</a>)!</em><br />
Storage locations available (<a href="https://curc.readthedocs.io/en/latest/compute/filesystems.html">see this link for full descriptions</a>):</p>

    <ul>
      <li><strong>Home filesystem:</strong> 2 GB of backed up space under <code class="language-plaintext highlighter-rouge">/home/$USER</code> (where <code class="language-plaintext highlighter-rouge">$USER</code> is your RMACC or Alpine username).</li>
      <li><strong>Projects filesystem:</strong> 250 GB of backed up space under <code class="language-plaintext highlighter-rouge">/projects/$USER</code> (where <code class="language-plaintext highlighter-rouge">$USER</code> is your RMACC or Alpine username).</li>
      <li><strong>Scratch filesystem:</strong> 10 TB (10,240 GB) of space <strong><em>which is not backed up</em></strong> under <code class="language-plaintext highlighter-rouge">/scratch/alpine/$USER</code> (where <code class="language-plaintext highlighter-rouge">$USER</code> is your RMACC or Alpine username).</li>
    </ul>
  </li>
  <li>
    <p><strong>External / remote storage:</strong> Users are encouraged to explore external data storage options for long-term hosting.<br />
Examples may include the following:</p>

    <ul>
      <li><strong><a href="https://www.colorado.edu/rc/resources/petalibrary">PetaLibrary</a></strong>: subsidized external storage host from University of Colorado Boulder&#8217;s Research Computing (requires specific arrangements outside of Alpine).</li>
      <li><strong>Cloud hosting:</strong> <a href="https://en.wikipedia.org/wiki/Object_storage">object storage</a> and related data hosting options from cloud providers like <a href="https://azure.microsoft.com/en-us">Microsoft Azure</a>, <a href="https://cloud.google.com/">Google Cloud</a> (<a href="https://www.cuanschutz.edu/offices/office-of-information-technology/tools-services/google-cloud-platform">internal CU Anschutz GC information</a>), or <a href="https://aws.amazon.com/">Amazon Web Services</a>.</li>
      <li><strong>Others:</strong> additional options include third-party &#8220;storage as a service&#8221; offerings like Google Drive or Dropbox and/or external servers maintained by other groups.</li>
    </ul>
  </li>
</ol>

<h3 id="how-do-i-send-or-receive-data-on-alpine">How do I send or receive data on Alpine?</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5leHRlcm5hbHN0b3JhZ2VbXCLwn5OBIEV4dGVybmFsIFN0b3JhZ2VcXG4odXNlciBzcGVjaWZpZWQgLyBjb25maWd1cmVkKTxici8-PGJyLz5cIl1cbnN1YmdyYXBoIGFscGluZVtcIvCflqXvuI8gQWxwaW5lPGJyLz48YnIvPlwiXVxuc3ViZ3JhcGggc3RvcmFnZVtcIvCfk4IgU3RvcmFnZTxici8-PGJyLz5cIl1cbmxvY2Fsc3RvcmFnZVtcIvCfk4EgTG9jYWwgU3RvcmFnZVxcbihzb21ldGltZXMgdGVtcG9yYXJ5KTxici8-PGJyLz5cIl1cbmVuZFxuZW5kXG4lJS1cbmV4dGVybmFsc3RvcmFnZSAtLT4gfCBzZW5kIGRhdGFcXG50byBBbHBpbmUgfCBsb2NhbHN0b3JhZ2VcbmxvY2Fsc3RvcmFnZSAtLT4gfCByZWNlaXZlIGRhdGFcXG5mcm9tIEFscGluZSB8IGV4dGVybmFsc3RvcmFnZVxuJSUtXG5zdHlsZSBhbHBpbmUgZmlsbDojZmZmZmZmLHN0cm9rZTojNDQ0NDQ0OyIsIm1lcm1haWQiOm51bGx9" /></p>

<p><em>Diagram showing external data storage being used to send or receive data on Alpine local storage.</em></p>

<p>Data may be sent to or gathered from Alpine using a number of different methods.
These may vary contingent on the external data storage being referenced, the code involved, or your group&#8217;s available resources.
Please reference the following documentation from the University of Colorado Boulder&#8217;s Research Computing regarding data transfers: <a href="https://curc.readthedocs.io/en/latest/compute/data-transfer.html">The Compute Environment - Data Transfer</a>.
<strong>Please note:</strong> due to the authentication configuration of Alpine many local or SSH-key based methods are not available for CU Anschutz users.
As a result, <a href="https://www.globus.org/">Globus</a> represents one of the best options available (see <a href="#3-%F0%9F%93%82-transfer-data-results">3. 📂 Transfer data results</a> below). While the Globus tutorial in this document describes how you can download data from Alpine to your computer, note that you can also use Globus to transfer data to Alpine from your computer.</p>

<h2 id="implementation">Implementation</h2>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG51c2Vyc1tcIigwLiBHYWluIGFjY2VzcylcXG7wn5GlIENVIEFuc2NodXR6XFxuVXNlcnM8YnIvPjxici8-XCJdXG5zdWJncmFwaCBhbHBpbmVbXCLwn5al77iPIEFscGluZTxici8-PGJyLz5cIl1cbmRpcmVjdGlvbiBMUlxuYWxwaW5ldGVybWluYWwxW1wiKDEuIFByZXBhcmUgY29kZSlcXG7ijKjvuI8gZ2l0IGNsb25lPGJyLz48YnIvPlwiXVxuYWxwaW5ldGVybWluYWwyW1wiKDIuIEltcGxlbWVudCBjb2RlKVxcbuKMqO-4jyBQcm9jZXNzIHJ1biBzY3JpcHQ8YnIvPjxici8-XCJdXG5zdWJncmFwaCByZXBvW1wi8J-TpiBUaGlzIHJlcG88YnIvPjxici8-XCJdXG5kaXJlY3Rpb24gVEJcbnJ1bnNjcmlwdFtcIvCfk4QgUnVuIHNjcmlwdDxici8-PGJyLz5cIl1cbnN1YmdyYXBoIGNvbmRhZW52W1wi8J-MkCBBbmFjb25kYSBlbnZpcm9ubWVudDxici8-PGJyLz5cIl1cbnB5dGhvbmNvZGVbXCLwn5OEIFB5dGhvbiBjb2RlPGJyLz48YnIvPlwiXVxuZW5kXG5lbmRcbnN1YmdyYXBoIHNsdXJtam9iW1wi8J-Xk--4jyBTbHVybSBwcm9jZXNzaW5nPGJyLz48YnIvPlwiXVxuZGlyZWN0aW9uIExSXG5wcm9jZXNzaW5nW1wi4pqZ77iPIFByb2Nlc3Npbmc8YnIvPjxici8-XCJdXG5lbmRcbnN1YmdyYXBoIHN0b3JhZ2VbXCLwn5OCIFN0b3JhZ2U8YnIvPjxici8-XCJdXG5sb2NhbHN0b3JhZ2VbXCIoMy4gR2F0aGVyIGRhdGEpXFxu8J-TgSBMb2NhbCBTdG9yYWdlXFxuKHNvbWV0aW1lcyB0ZW1wb3JhcnkpPGJyLz48YnIvPlwiXVxuZW5kXG5lbmRcbiUlLVxudXNlcnMgLS0-IHwgZ2FpbiBhY2Nlc3NcXG52aWEgUk1BQ0MgYWNjdC58IGFscGluZXRlcm1pbmFsMVxuYWxwaW5ldGVybWluYWwxIC0tPiB8IGJyaW5nIHJlcG9cXG4gY29udGVudHMgdG8gQWxwaW5lIHwgcmVwb1xucnVuc2NyaXB0IC0tPiB8cnVuXFxuc2NyaXB0IGZpbGV8IGFscGluZXRlcm1pbmFsMlxuYWxwaW5ldGVybWluYWwyIC0tPiB8c3VibWl0XFxuU2x1cm0gam9ifCBwcm9jZXNzaW5nXG5wcm9jZXNzaW5nIC0tPiB8IGNvbXBsZXRlZCBqb2JcXG4gc2VuZHMgZGF0YSB0b3wgbG9jYWxzdG9yYWdlXG5weXRob25jb2RlIC0uLT4gfCBydW4gcHl0aG9uIGNvZGVcXG53aXRoaW4gY29uZGEgZW52IHxwcm9jZXNzaW5nXG4lJS1cbnN0eWxlIGNvbmRhZW52IGZpbGw6I0ZFRjNDNyxzdHJva2U6I0Q5NzcwNjtcbnN0eWxlIHJlcG8gZmlsbDojZmZmZmZmLHN0cm9rZTojNDQ0NDQ0O1xuc3R5bGUgYWxwaW5lIGZpbGw6I2ZmZmZmZixzdHJva2U6IzQ0NDQ0NDtcbnN0eWxlIHVzZXJzIGZpbGw6I0QxRkFFNSxzdHJva2U6IzQ0NDQ0NDtcbnN0eWxlIGFscGluZXRlcm1pbmFsMSBmaWxsOiNEMUZBRTUsc3Ryb2tlOiM0NDQ0NDQ7XG5zdHlsZSBhbHBpbmV0ZXJtaW5hbDIgZmlsbDojRDFGQUU1LHN0cm9rZTojNDQ0NDQ0O1xuc3R5bGUgbG9jYWxzdG9yYWdlIGZpbGw6I0QxRkFFNSxzdHJva2U6IzQ0NDQ0NDsiLCJtZXJtYWlkIjpudWxsfQ" /></p>

<p><em>Diagram showing how <a href="https://github.com/CU-DBMI/example-hpc-alpine-python">an example project repository</a> may be used within Alpine through primary steps and processing workflow.</em></p>

<p>Use the following steps to understand how Alpine may be used with <a href="https://github.com/CU-DBMI/example-hpc-alpine-python">an example project repository</a> to run example Python code.</p>

<h3 id="0--gain-alpine-access">0. 🔑 Gain Alpine access</h3>

<p>First you will need to gain access to Alpine.
This access is provided to members of the University of Colorado Anschutz through <a href="https://rmacc.org/">RMACC</a> and is separate from other credentials which may be provided by default in your role.
Please see the following guide from the University of Colorado Boulder&#8217;s Research Computing covering requesting access and generally how this works for members of the University of Colorado Anschutz.</p>

<ul>
  <li><strong>RMACC Access to Alpine:</strong> <a href="https://curc.readthedocs.io/en/latest/access/rmacc.html">https://curc.readthedocs.io/en/latest/access/rmacc.html</a></li>
</ul>

<h3 id="1-️-prepare-code-on-alpine">1. 🛠️ Prepare code on Alpine</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>username@xsede.org@login-ciX ~]<span class="nv">$ </span><span class="nb">cd</span> /projects/<span class="nv">$USER</span>
<span class="o">[</span>username@xsede.org@login-ciX username@xsede.org]<span class="nv">$ </span>git clone https://github.com/CU-DBMI/example-hpc-alpine-python
Cloning into <span class="s1">'example-hpc-alpine-python'</span>...
... git output ...
<span class="o">[</span>username@xsede.org@login-ciX username@xsede.org]<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> example-hpc-alpine-python
... <span class="nb">ls </span>output ...
</code></pre></div></div>

<p><em>An example of what this preparation section might look like in your Alpine terminal session.</em></p>

<p>Next we will prepare our code within Alpine.
We do this to balance the fact that we may develop and source control code outside of Alpine.
In the case of this example work, we assume git as an interface for GitHub as the source control host.</p>

<p>Below you&#8217;ll find the general steps associated with this process.</p>

<ol>
  <li>Login to the Alpine command line (<a href="https://curc.readthedocs.io/en/latest/access/rmacc.html#logging-in-to-open-ondemand">reference this guide</a>).</li>
  <li>Change directory into the <strong>Projects filesystem</strong> (generally we&#8217;ll assume processed data produced by this code are large enough to warrant the need for additional space):<br /> <code class="language-plaintext highlighter-rouge">cd /projects/$USER</code></li>
  <li>Use <code class="language-plaintext highlighter-rouge">git</code> (built into Alpine by default) commands to clone this repo:<br /> <code class="language-plaintext highlighter-rouge">git clone https://github.com/CU-DBMI/example-hpc-alpine-python</code></li>
  <li>Verify the contents were received as desired (this should show the contents of <a href="https://github.com/CU-DBMI/example-hpc-alpine-python">an example project repository</a>):<br /> <code class="language-plaintext highlighter-rouge">ls -l example-hpc-alpine-python</code></li>
</ol>

<!--- anchor for referencing github authentication guidance directly --->

<p><a id="prepare-code-authenticate"></a></p>

<div class="alert" style="--color: #6366f1">
  
  <i class="icon fa-solid fa-circle-question"></i>
  <div class="alert-content">
    
<p><strong>What if I need to authenticate with GitHub?</strong></p>

<p>There are times where you may need to authenticate with GitHub in order to accomplish your work.
From a GitHub perspective, you will want to use either GitHub Personal Access Tokens (PAT) (recommended by GitHub) or SSH keys associated with the <code class="language-plaintext highlighter-rouge">git</code> client on Alpine.
Note: if you are prompted for a username and password from <code class="language-plaintext highlighter-rouge">git</code> when accessing a GitHub resource, the password is now associated with other keys like PAT&#8217;s instead of your user&#8217;s password (<a href="https://github.blog/changelog/2021-08-12-git-password-authentication-is-shutting-down">reference</a>).
See the following guide from GitHub for more information on how authentication through <code class="language-plaintext highlighter-rouge">git</code> to GitHub works:</p>

<ul>
  <li><strong>GitHub - Authenticating with GitHub from Git:</strong> <a href="https://docs.github.com/en/get-started/quickstart/set-up-git#authenticating-with-github-from-git">https://docs.github.com/en/get-started/quickstart/set-up-git#authenticating-with-github-from-git</a></li>
</ul>

  </div>
</div>

<h3 id="2-️-implement-code-on-alpine">2. ⚙️ Implement code on Alpine</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>username@xsede.org@login-ciX ~]<span class="nv">$ </span>sbatch <span class="nt">--export</span><span class="o">=</span><span class="nv">CSV_FILEPATH</span><span class="o">=</span><span class="s2">"/projects/</span><span class="nv">$USER</span><span class="s2">/example_data.csv"</span> example-hpc-alpine-python/run_script.sh
<span class="o">[</span>username@xsede.org@login-ciX username@xsede.org]<span class="nv">$ </span><span class="nb">tail</span> <span class="nt">-f</span> example-hpc-alpine-python.out
... <span class="nb">tail </span>output <span class="o">(</span>ctrl/cmd + c to cancel<span class="o">)</span> ...
<span class="o">[</span>username@xsede.org@login-ciX username@xsede.org]<span class="nv">$ </span><span class="nb">head</span> <span class="nt">-n</span> 2 example_data.csvexample-hpc-alpine-python
... data output ...
</code></pre></div></div>

<p><em>An example of what this implementation section might look like in your Alpine terminal session.</em></p>

<p>After our code is available on Alpine we&#8217;re ready to run it using Slurm and related resources.
We use Anaconda to build a Python environment with specified packages for reproducibility.
The main goal of the Python code related to this work is to create a CSV file with random data at a specified location.
We&#8217;ll use <a href="https://slurm.schedmd.com/sbatch.html">Slurm&#8217;s <code class="language-plaintext highlighter-rouge">sbatch</code> command</a>, which submits batch scripts to Slurm using various options.</p>

<ol>
  <li>Use the <code class="language-plaintext highlighter-rouge">sbatch</code> command with exported variable <code class="language-plaintext highlighter-rouge">CSV_FILEPATH</code>.<br /> <code class="language-plaintext highlighter-rouge">sbatch --export=CSV_FILEPATH="/projects/$USER/example_data.csv" example-hpc-alpine-python/run_script.sh</code></li>
  <li>After a short moment, use the <a href="https://en.wikipedia.org/wiki/Tail_(Unix)"><code class="language-plaintext highlighter-rouge">tail</code></a> command to observe the log file created by Slurm for this sbatch submission. This file can help you understand where things are at and if anything went wrong.<br /> <code class="language-plaintext highlighter-rouge">tail -f example-hpc-alpine-python.out</code></li>
  <li>Once you see that the work has completed from the log file, take a look at the top 2 lines of the data file using the <a href="https://en.wikipedia.org/wiki/Head_(Unix)"><code class="language-plaintext highlighter-rouge">head</code></a> command to verify the data arrived as expected (column names with random values):<br /> <code class="language-plaintext highlighter-rouge">head -n 2 example_data.csv</code></li>
</ol>

<h3 id="3--transfer-data-results">3. 📂 Transfer data results</h3>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCBhbHBpbmVbXCLwn5al77iPIEFscGluZTxici8-PGJyLz5cIl1cbmxvY2Fsc3RvcmFnZVtcIvCfk4QgL3Byb2plY3RzLyRVU0VSL2V4YW1wbGVfZGF0YS5jc3Y8YnIvPjxici8-XCJdXG5lbmRcbnN1YmdyYXBoIGdsb2J1c1tcIuKYge-4jyBHbG9idXM8YnIvPjxici8-XCJdXG5nbG9idXN3ZWJbXCLwn5SBIEdsb2J1cyB3ZWIgaW50ZXJmYWNlPGJyLz48YnIvPlwiXVxuZW5kXG5zdWJncmFwaCBsb2NhbG1hY2hpbmVbXCLwn5al77iPIExvY2FsIGRldmljZTxici8-PGJyLz5cIl1cbnBlcnNvbmFsY29ubmVjdFtcIvCflIEgR2xvYnVzIENvbm5lY3QgUGVyc29uYWw8YnIvPjxici8-XCJdXG5sb2NhbGRpcltcIvCfk4QgL2FfbG9jYWxfZGlyL2V4YW1wbGVfZGF0YS5jc3Y8YnIvPjxici8-XCJdXG5lbmRcbiUlLVxubG9jYWxzdG9yYWdlIC0tPiB8IG1vdmVzIGRhdGFcXG5mcm9tIEFscGluZSB8IGdsb2J1c3dlYlxuZ2xvYnVzd2ViIC0tPiB8IGludGVyZmFjZSBcXG4gZnJvbSBHbG9idXMgfCBwZXJzb25hbGNvbm5lY3RcbnBlcnNvbmFsY29ubmVjdCAtLT4gfCBkb3dubG9hZHMgXFxuIGxvY2FsIGZpbGUgfCBsb2NhbGRpclxuJSUtXG5zdHlsZSBhbHBpbmUgZmlsbDojZmZmZmZmLHN0cm9rZTojNDQ0NDQ0O1xuc3R5bGUgZ2xvYnVzIGZpbGw6I2ZmZmZmZixzdHJva2U6IzQ0NDQ0NDtcbnN0eWxlIGxvY2FsbWFjaGluZSBmaWxsOiNmZmZmZmYsc3Ryb2tlOiM0NDQ0NDQ7IiwibWVybWFpZCI6bnVsbH0" /></p>

<p><em>Diagram showing how example_data.csv may be transferred from Alpine to a local machine using Globus solutions.</em></p>

<p>Now that the example data output from the Slurm work is available we need to transfer that data to a local system for further use.
In this example we&#8217;ll use <a href="https://www.globus.org/">Globus</a> as a data transfer method from Alpine to our local machine.
<strong>Please note:</strong> always be sure to check data privacy and policy which change the methods or storage locations you may use for your data!</p>

<ol>
  <li><strong>Globus local machine configuration</strong>
    <ol>
      <li>Install <a href="https://www.globus.org/globus-connect-personal">Globus Connect Personal</a> on your local machine.</li>
      <li>During installation, you will be prompted to login to Globus. Use your ACCESS credentials to login.</li>
      <li>During installation login, note the label you provide to Globus. This will be used later, referenced as &#8220;Globus Connect Personal label&#8221;.</li>
      <li>Ensure you add and (<strong>importantly:</strong>) provide write access to a local directory via <strong>Globus Connect Personal - Preferences - Access</strong> where you&#8217;d like the data to be received from Alpine to your local machine.<br /><br /></li>
    </ol>
  </li>
  <li><strong>Globus web interface</strong>
    <ol>
      <li>Use your ACCESS credentials to login to the <a href="https://app.globus.org/login">Globus web interface</a>.</li>
      <li><strong>Configure File Manager <ins>left</ins> side (source selection)</strong>
        <ol>
          <li>Within the Globus web interface on the File Manager tab, use the <strong>Collection</strong> input box to search or select <strong>&#8220;CU Boulder Research Computing ACCESS&#8221;</strong>.</li>
          <li>Within the Globus web interface on the File Manager tab, use the <strong>Path</strong> input box to enter: <code class="language-plaintext highlighter-rouge">/projects/your_username_here/</code> (replacing &#8220;your_username_here&#8221; with your username from Alpine, including the &#8220;@&#8221; symbol if it applies).</li>
        </ol>
      </li>
      <li><strong>Configure File Manager <ins>right</ins> side (destination selection)</strong>
        <ol>
          <li>Within the Globus web interface on the File Manager tab, use the <strong>Collection</strong> input box to search or select the __Globus Connect Personal label you provided in earlier steps.</li>
          <li>Within the Globus web interface on the File Manager tab, use the <strong>Path</strong> input box to enter the local path which you made accessible in earlier steps.</li>
        </ol>
      </li>
      <li><strong>Begin Globus transfer</strong>
        <ol>
          <li>Within the Globus web interface on the File Manager tab on the left side (source selection), check the box next to the file <code class="language-plaintext highlighter-rouge">example_data.csv</code>.</li>
          <li>Within the Globus web interface on the File Manager tab on the left side (source selection), click the &#8220;Start ▶️&#8221; button to begin the transfer from Alpine to your local directory.</li>
          <li>After clicking the &#8220;Start ▶️&#8221; button, you may see a message in the top right with the message &#8220;Transfer request submitted successfully&#8221;. You can click the link to view the details associated with the transfer.</li>
          <li>After a short period, the file will be transferred and you should be able to verify the contents on your local machine.</li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

<h2 id="further-references">Further References</h2>

<ul>
  <li><a href="https://www.colorado.edu/rc/">University of Colorado Boulder&#8217;s Research Computing</a></li>
  <li><a href="https://curc.readthedocs.io/en/latest/clusters/alpine/index.html">HPC Cluster Alpine Documentation</a></li>
  <li><a href="https://docs.github.com/en/get-started/getting-started-with-git">GitHub: Getting started with Git</a></li>
  <li><a href="https://slurm.schedmd.com/">Slurm Documentation</a></li>
  <li><a href="https://docs.globus.org/">Globus Documentation</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="Python" /><category term="Anaconda" /><category term="high-performance-compute" /><category term="slurm" /><category term="globus" /><summary type="html"><![CDATA[Tip of the Week: Using Python and Anaconda with the Alpine HPC Cluster]]></summary></entry><entry><title type="html">Tip of the Week: Automate Software Workflows with GitHub Actions</title><link href="/set-website/preview/pr-25/2023/03/15/Automate-Software-Workflows-with-Github-Actions.html" rel="alternate" type="text/html" title="Tip of the Week: Automate Software Workflows with GitHub Actions" /><published>2023-03-15T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2023/03/15/Automate-Software-Workflows-with-Github-Actions</id><content type="html" xml:base="/set-website/preview/pr-25/2023/03/15/Automate-Software-Workflows-with-Github-Actions.html"><![CDATA[<h1 id="tip-of-the-week-automate-software-workflows-with-github-actions">Tip of the Week: Automate Software Workflows with GitHub Actions</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p>There are many routine tasks which can be automated to help save time and increase reproducibility in software development. GitHub Actions provides one way to accomplish these tasks using code-based workflows and related workflow implementations. This type of automation is commonly used to perform tests, builds (preparing for the delivery of the code), or delivery itself (sending the code or related artifacts where they will be used).</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Use <a href="https://docs.github.com/en/actions">GitHub Actions</a> to perform <a href="https://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> work automatically by leveraging <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">Github&#8217;s workflow specification</a> and the <a href="https://github.com/marketplace?type=actions">existing marketplace of already-created Actions</a>. You can test these workflows with <a href="https://github.com/nektos/act">Act</a>, which can enhance development with this feature of Github. Consider making use of <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere">&#8220;write once, run anywhere&#8221; (WORA)</a> and <a href="https://docs.dagger.io/">Dagger</a> in conjunction with GitHub Actions to enable reproducible workflows for your software projects.</p>

<h2 id="workflows-in-software">Workflows in Software</h2>

<pre class="mermaid">
flowchart LR
  start((start)) --&gt; action
  action["action(s)"] --&gt; en((end))
  style start fill:#6EE7B7
  style en fill:#FCA5A5
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p class="center"><em>An example workflow.</em></p>

<p><a href="https://en.wikipedia.org/wiki/Workflow">Workflows</a> consist of sequenced activities used by various systems. Software development  workflows help accomplish work the same way each time by using what are commonly called &#8220;workflow engines&#8221;. Generally, workflow engines are provided code which indicate beginnings (what triggers a workflow to begin), actions (work being performed in sequence), and an ending (where the workflow stops). There are <a href="https://s.apache.org/existing-workflow-systems">many workflow engines</a>, including some which help accomplish work alongside version control.</p>

<h2 id="github-actions">GitHub Actions</h2>

<pre class="mermaid">
flowchart LR
  subgraph workflow [GitHub Actions Workflow Run]
    direction LR
    action["action(s)"] --&gt; en((end))
    start((event\ntrigger))
  end
  start --&gt; action
  style start fill:#6EE7B7
  style en fill:#FCA5A5
</pre>

<p class="center"><em>A diagram showing GitHub Actions as a workflow.</em></p>

<p><a href="https://docs.github.com/en/actions">GitHub Actions</a> is a feature of GitHub which allows you to run workflows in relation to your code as a <a href="https://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> (including automated testing, builds, and deployments) and general automation tool. For example, one can use GitHub Actions to make sure code related to a <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">GitHub Pull Request</a> passes certain tests before it is allowed to be merged. GitHub Actions may be specified using <a href="https://en.wikipedia.org/wiki/YAML">YAML files</a> within your repository&#8217;s <code class="language-plaintext highlighter-rouge">.github/workflows</code> directory by using syntax specific to <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">Github&#8217;s workflow specification</a>. Each YAML file under the <code class="language-plaintext highlighter-rouge">.github/workflows</code> directory can specify workflows to accomplish tasks related to your software work. GitHub Actions workflows may be customized to your own needs, or use an <a href="https://github.com/marketplace?type=actions">existing marketplace of already-created Actions</a>.</p>

<figure class="figure">
  <a class="figure-image" aria-label="Image showing GitHub Actions tab on GitHub website.">
    <img src="/set-website/preview/pr-25/images/github_actions_tab.png" style="
        width: auto;
        max-height: unset;
      " alt="Image showing GitHub Actions tab on GitHub website." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Image showing GitHub Actions tab on GitHub website.

    </figcaption>
  
</figure>

<p>GitHub provides an <a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#viewing-the-activity-for-a-workflow-run">&#8220;Actions&#8221; tab</a> for each repository which helps visualize and control Github Actions workflow runs. This tab shows a history of all workflow runs in the repository. For each run, it shows whether it was run successful or not, the associated logs, and controls to cancel or re-run it.</p>

<blockquote>
  <p><strong>GitHub Actions Examples</strong>
GitHub Actions is sometimes better understood with examples. See the following references for a few basic examples of using GitHub Actions in a simulated project repository.</p>

  <ul>
    <li><a href="https://github.com/CU-DBMI/demo-github-actions/blob/main/.github/workflows/1.example-action.yml">1.example-action.yml</a>: demonstrates how to run a snippet of Python code in a basic GitHub Actions workflow.</li>
    <li><a href="https://github.com/CU-DBMI/demo-github-actions/blob/main/.github/workflows/2.run-python-file.yml">2.run-python-file.yml</a>: demonstrates how to reliably reproduce the environment by installing dependencies using <a href="https://python-poetry.org/docs/">Poetry</a>, and then run a Python file in that environment.</li>
    <li><a href="https://github.com/CU-DBMI/demo-github-actions/blob/main/.github/workflows/3.run-matrixed-pytest-ghactions.yml">3.run-matrixed-pytest-ghactions.yml</a>: demonstrates how to run pytest tests against multiple versions of Python (i.e., &#8220;matrixed&#8221; Python versions) using GitHub Actions with a <a href="https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs">matrix strategy</a>.</li>
  </ul>
</blockquote>

<h2 id="testing-with-act">Testing with Act</h2>

<pre class="mermaid">
flowchart LR
  subgraph container ["local simulation container(s)"]
    direction LR
    subgraph workflow [GitHub Actions Workflow Run]
      direction LR
      start((event\ntrigger))
      action --&gt; en((end))
    end
  end
  start --&gt; action
  act\[Run Act] -.-&gt; |Simulate\ntrigger| start
  style start fill:#6EE7B7
  style en fill:#FCA5A5
</pre>

<p class="center"><em>A diagram showing how GitHub Actions workflows may be triggered from Act</em></p>

<p>One challenge with GitHub Actions is a lack of standardized local testing tools. For example, how will you know that a new GitHub Actions workflow will function as expected (or at all) without pushing to the GitHub repository? One third-party tool which can help with this is <a href="https://github.com/nektos/act">Act</a>. Act uses <a href="https://github.com/nektos/act#runners">Docker images</a> which require <a href="https://docs.docker.com/desktop/">Docker Desktop</a> to simulate what running a GitHub Action workflow within your local environment. Using Act can sometimes avoid guessing what will occur when a GitHub Action worklow is added to your repository. See <a href="https://github.com/nektos/act#installation">Act&#8217;s installation documentation</a> for more information on getting started with this tool.</p>

<h2 id="nested-workflows-with-github-actions">Nested Workflows with GitHub Actions</h2>

<pre class="mermaid">
flowchart LR

  subgraph action ["Nested Workflow (Dagger, etc)"]
    direction LR
    actions
    start2((start)) --&gt; actions
    actions --&gt; en2((end))
    en2((end))
  end
  subgraph workflow2 [Local Environment Run]
    direction LR
    run2[run workflow]
    en3((end))
    start3((event\ntrigger))
  end
  subgraph workflow [GitHub Actions Workflow Run]
    direction LR
    start((event\ntrigger))
    run[run workflow]
    en((end))
  end
  
  start --&gt; run
  start3 --&gt; run2
  action -.-&gt; run
  run --&gt; en
  run2 --&gt; en3
  action -.-&gt; run2
  style start fill:#6EE7B7
  style start2 fill:#D1FAE5
  style start3 fill:#6EE7B7
  style en fill:#FCA5A5
  style en2 fill:#FFE4E6
  style en3 fill:#FCA5A5
</pre>

<p class="center"><em>A diagram showing how GitHub Actions may leverage nested workflows with tools like Dagger.</em></p>

<p>There are times when GitHub Actions may be too constricting or Act may not accurately simulate workflows. We also might seek to <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere">&#8220;write once, run anywhere&#8221; (WORA)</a> to enable flexible development on many environments. One workaround to this challenge is to use nested workflows which are compatible with local environments and GitHub Actions environments. <a href="https://docs.dagger.io/">Dagger</a> is one tool which enables programmatically specifying and using workflows this way. Using Dagger allows you to trigger workflows on your local machine or GitHub Actions with the same underlying engine, meaning there are fewer inconsistencies or guesswork for developers (see here for <a href="https://docs.dagger.io/cli#how-does-it-work">an explanation of how Dagger works</a>).</p>

<p>There are also other alternatives to Dagger you may want to consider based on your usecase, preference, or interest. <a href="https://github.com/earthly/earthly">Earthly</a> is similar to Dagger and uses &#8220;earthfiles&#8221; as a specification. Both Dagger and Earthly (in addition to GitHub Actions) use container-based approaches, which in-and-of themselves present additional alternatives outside the scope of this article.</p>

<blockquote>
  <p><strong>GitHub Actions with Nested Workflow Example</strong>
Reference this example for a brief demonstration of how GitHub Actions and Dagger may be used together.</p>

  <ul>
    <li><a href="https://github.com/CU-DBMI/demo-github-actions/blob/main/.github/workflows/4.run-matrixed-pytest-dagger.yml">4.run-matrixed-pytest-dagger.yml</a>: demonstrates how to run matrixed Python versions for confirming passing pytest tests using GitHub Actions and Dagger together. A <a href="https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs">GitHub Actions matrix strategy</a> is used to span concurrent work while retaining the reproducibility from Dagger task specification.</li>
  </ul>
</blockquote>

<h2 id="closing-remarks">Closing Remarks</h2>

<p>Using GitHub Actions through the above methods can help automate your technical work and increase the quality of your code with sometimes very little additional effort. Saving time through this form of automation can provide additional flexibility accomplish more complex work which requires your attention (perhaps <a href="https://cu-dbmi.github.io/set-website/2023/01/17/Timebox-Your-Software-Work.html">using timeboxing techniques</a>). Even small amounts of time saved can turn into large opportunities for other work. On this note, be sure to explore how GitHub Actions can improve things for your software endeavors.</p>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="github" /><category term="workflow" /><category term="github-actions" /><category term="continuous-integration" /><summary type="html"><![CDATA[Tip of the Week: Automate Software Workflows with GitHub Actions]]></summary></entry><entry><title type="html">Tip of the Week: Branch, Review, and Learn</title><link href="/set-website/preview/pr-25/2023/02/13/Branch-Review-and-Learn.html" rel="alternate" type="text/html" title="Tip of the Week: Branch, Review, and Learn" /><published>2023-02-13T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2023/02/13/Branch-Review-and-Learn</id><content type="html" xml:base="/set-website/preview/pr-25/2023/02/13/Branch-Review-and-Learn.html"><![CDATA[<h1 id="tip-of-the-week-branch-review-and-learn">Tip of the Week: Branch, Review, and Learn</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p>Git provides a feature called <a href="https://git-scm.com/docs/git-branch">branching</a> which facilitates parallel and segmented programming work through <a href="https://git-scm.com/docs/git-commit">commits</a> with version control. Using branching enables both work concurrency (multiple people working on the same repository at the same time) as well as a chance to isolate and review specific programming tasks. This article covers some conceptual best practices with branching, reviewing, and merging code using Github.</p>

<!-- excerpt end -->

<p><strong>Please note:</strong> the content below represents one opinion in a larger space of Git workflow concepts (it&#8217;s not perfect!). Developer cultures may vary on these topics; be sure to acknowledge people and culture over exclusive or absolute dedication to what is found below.</p>

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Use <a href="https://www.atlassian.com/git/tutorials/using-branches">git branching techniques</a> to segment the completion of programming tasks, gradually and consistently committing small changes (practicing <a href="https://en.wikipedia.org/wiki/Festina_lente"><em>festina lente</em> or &#8220;make haste, slowly&#8221;</a>). When a group of small changes are ready from branches, request <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request">pull request reviews</a> and take advantage of <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request">comments</a> to <a href="https://en.wikipedia.org/wiki/Continual_improvement_process">continuously improve</a> the work. Prepare for a branch <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request">merge</a> after review by deciding <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github">which merge strategy</a> is appropriate and automating merge requirements with <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches">branch protection rules</a>.</p>

<h2 id="concept-coursework-branching">Concept: Coursework Branching</h2>

<pre class="mermaid">
flowchart LR
 subgraph Course
    direction LR
    open["open\nassignment"]
    turn_in["review\nassignment"]
  end
  subgraph Student ["&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student"]
    direction LR
    work["completed\nassignment"]
  end
  open -.-&gt; turn_in
  open --&gt; |works towards| work
  work --&gt; |seeks review| turn\_in
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p class="center"><em>An example course and student assignment workflow.</em></p>

<p><a href="https://www.atlassian.com/git/tutorials/using-branches">Git branching</a> practices may be understood in context with similar workflows from real life. Consider a student taking a course, where an assignment is given to them to complete. In addition to the steps shown in the diagram above, it&#8217;s important to think about <em>why</em> this pattern is beneficial:</p>

<ul>
  <li>Completing an assignment allows us as social, inter-dependent beings to present new findings which enable learning and amalgamation of additional ideas from others.</li>
  <li>The timebound nature of assignments enables us to practice some form of <a href="https://cu-dbmi.github.io/set-website/2023/01/17/Timebox-Your-Software-Work.html">timeboxing</a> so as to minimize tasks which may take too much time.</li>
  <li>Segmenting applied learning in distinct, goal-orientated chunks helps make larger topics easier to understand.</li>
</ul>

<h2 id="branching-to-complete-an-assignment">Branching to Complete an &#8220;Assignment&#8221;</h2>

<pre class="mermaid">
%%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {
      'git0': '#4F46E5',
      'git1': '#10B981',
      'gitBranchLabel1': '#ffffff'
} } }%%
    gitGraph
       commit id: "..."
       commit id: "opened"
       branch assignment
       checkout assignment
       commit id: "completed"
       checkout main
</pre>

<p class="center"><em>An example git diagram showing assignment branch based off main.</em></p>

<p>Following the course assignment workflow, the diagram above shows an in-progress <code class="language-plaintext highlighter-rouge">assignment</code> branch based off of the <code class="language-plaintext highlighter-rouge">main</code> branch. When the <code class="language-plaintext highlighter-rouge">assignment</code> branch is created, we bring into it everything we know from <code class="language-plaintext highlighter-rouge">main</code> (the course) so far in the form of <a href="https://github.com/git-guides/git-commit">commits</a>, or groups of changes to various files. <a href="https://github.com/git-guides#create-a-branch">Branching</a> allows us to make consistent and well described changes based on what&#8217;s already happened without impacting others work in the meantime.</p>

<blockquote>
  <p>Branching best practices:</p>

  <ul>
    <li><strong>Keep the name and work with branches dedicated to a specific and focused purpose.</strong> For example: a branch named <code class="language-plaintext highlighter-rouge">fix-links-in-docs</code> might entail work related to fixing HTTP links within documentation.</li>
    <li><strong>Consider the use of <a href="https://docs.github.com/en/get-started/quickstart/fork-a-repo">Github Forks</a></strong> (along with branches within the fork) to help further isolate and enrich work potential. Forks also allow remixing existing work into new possibilities.</li>
    <li><strong><a href="https://en.wikipedia.org/wiki/Festina_lente"><em>festina lente</em></a> or &#8220;make haste, slowly&#8221;:</strong> Commits on any branch represent small chunks of a cohesive idea which will eventually be brought to <code class="language-plaintext highlighter-rouge">main</code>. It is often beneficial to be consistent with small, gradual commits to avoid a rushed or incomplete submission. The same applies more generally for software; taking time upfront to do things well can mean time saved later.</li>
  </ul>
</blockquote>

<h2 id="reviewing-the-branched-work">Reviewing the Branched Work</h2>

<pre class="mermaid">
%%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {
      'git0': '#6366F1',
      'git1': '#10B981',
      'gitBranchLabel1': '#ffffff'
} } }%%
    gitGraph
       commit id: "..."
       commit id: "opened"
       branch assignment
       checkout assignment
       commit id: "completed"
       checkout main
       merge assignment id: "reviewed"
</pre>

<p class="center"><em>An example git diagram showing assignment branch being merged with main after a review.</em></p>

<p>The diagram above depicts a merge from the <code class="language-plaintext highlighter-rouge">assignment</code> branch to pull the changes into the <code class="language-plaintext highlighter-rouge">main</code> branch, simulating an assignment being returned for review within a course. While merges may be forced without review, it&#8217;s a best practice create a <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request">Pull Request (PR) Review</a> (also known as a <a href="https://docs.gitlab.com/ee/user/project/merge_requests/">Merge Request (MR)</a> on some systems) and then ask other members of your team to review it. Doing this provides a chance to make revisions before code changes are &#8220;finalized&#8221; within the <code class="language-plaintext highlighter-rouge">main</code> branch.</p>

<blockquote>
  <p>Github provides special tools for reviews which can assist both the author and reviewer:</p>

  <ul>
    <li><strong>Keep code changes intended for review small</strong>, enabling reviewers to reason through the work to more quickly provide feedback and practicing <a href="https://en.wikipedia.org/wiki/Continual_improvement_process">incremental continuous improvement</a> (it may be difficult to address everything at once!). This also may denote the git history for a repository in a clearer way.</li>
    <li><strong>Github comments:</strong> <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#about-pull-request-comments">Overall review comments</a> (encompassing all work from the branch) and <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request">Inline comments</a> (inquiring about individual lines of code) may be provided. Inline comments may also include code suggestions, which allows for code-based revision suggestions that may be committed directly to the branch using markdown codeblocks (<code class="language-plaintext highlighter-rouge"> </code>``suggestion `).</li>
    <li><strong>Github issues:</strong> <a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-comment">Creating issues from comments</a> allows the creation of new repository issues to address topics outside of the current PR.</li>
  </ul>
</blockquote>

<h2 id="merging-the-branch-after-review">Merging the Branch after Review</h2>

<pre class="mermaid">
%%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {
      'git0': '#6366F1'
} } }%%
    gitGraph
       commit id: "..."
       commit id: "opened"
       commit type: HIGHLIGHT id: "reviewed"
       commit id: "...."
</pre>

<p class="center"><em>An example git diagram showing the main branch after the assignment branch has been merged (and removed).</em></p>

<p>Changes may be made within the <code class="language-plaintext highlighter-rouge">assignment</code> branch until the work is in a state where the authors and reviewers are satisfied. At this point, the branch changes may be <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request">merged</a> into <code class="language-plaintext highlighter-rouge">main</code>. Approvals are sometimes provided informally (for ex., with a comment: &#8220;LGTM (looks good to me)!&#8221;) or explicitly (for ex., <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/approving-a-pull-request-with-required-reviews">approvals within Github</a>) to indicate or enable branch merge readiness . After the merge, changes may continue to be made in a similar way (perhaps accounting for concurrently branched work elsewhere). Generally, a merged branch may be removed afterwards to help maintain an organized working environment (see <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/deleting-and-restoring-branches-in-a-pull-request">Github PR branch removal</a>).</p>

<blockquote>
  <p>Github provides special tools for merging:</p>

  <ul>
    <li><strong>Decide which merge strategy is appropriate (there are many!):</strong> There are many <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github">merge strategies within Github</a> (merge commits, squash merges, and rebase merging). Take time to understand them and choose which one works best.</li>
    <li><strong>Consider using branch protection to automate merge requirements:</strong> The <code class="language-plaintext highlighter-rouge">main</code> or other branches may be &#8220;protected&#8221; against merges using <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches">branch protection rules</a>. These rules can require reviewer approvals or automatic status checks to pass before changes may be merged.</li>
    <li><strong>Use merge queuing to manage multiple PR&#8217;s:</strong> When there are many unmerged PR&#8217;s, it can sometimes be difficult to document and ensure each are merged in a desired sequence. Consider using <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue">merge queues</a> to help with this process.</li>
  </ul>
</blockquote>

<h2 id="additional-resources">Additional Resources</h2>

<p>The links below may provide additional guidance on using these git features, including in-depth coverage of various features and related configuration.</p>

<ul>
  <li><a href="https://swcarpentry.github.io/git-novice/">Software Carpentry: Version Control with Git</a></li>
  <li><a href="https://github.com/git-guides">Github: Git Guide</a></li>
  <li><a href="https://www.atlassian.com/git/tutorials/what-is-version-control">Atlassian: What is version control?</a></li>
  <li><a href="https://docs.gitlab.com/ee/topics/git/">Git Lab: Git</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="git" /><category term="branching" /><category term="pull-requests" /><category term="merging" /><summary type="html"><![CDATA[Tip of the Week: Branch, Review, and Learn]]></summary></entry><entry><title type="html">Tip of the Week: Software Linting with R</title><link href="/set-website/preview/pr-25/2023/01/30/Software-Linting-with-R.html" rel="alternate" type="text/html" title="Tip of the Week: Software Linting with R" /><published>2023-01-30T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2023/01/30/Software-Linting-with-R</id><content type="html" xml:base="/set-website/preview/pr-25/2023/01/30/Software-Linting-with-R.html"><![CDATA[<h1 id="tip-of-the-week-software-linting-with-r">Tip of the Week: Software Linting with R</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p>This article covers using the software technique of linting on R code in order to improve code quality, development velocity, and collaboration.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Use software linting (<a href="https://en.wikipedia.org/wiki/Static_program_analysis">static analysis</a>) practices on your R code with existing packages <a href="https://github.com/r-lib/lintr"><code class="language-plaintext highlighter-rouge">lintr</code></a> and <a href="https://github.com/r-lib/styler"><code class="language-plaintext highlighter-rouge">styler</code></a> (among others). These linters may be applied using <a href="https://pre-commit.com">pre-commit</a> in your local development environment or as <a href="https://en.wikipedia.org/wiki/Continuous_testing">continuous tests</a> using for example <a href="https://docs.github.com/en/actions">Github Actions</a>.</p>

<h2 id="treating-r-as-software">Treating R as Software</h2>

<blockquote>
  <p>&#8220;Many users think of R as a statistics system. We prefer to think of it as an environment within which statistical techniques are implemented.&#8221;</p>
</blockquote>

<p><em>(<a href="https://www.r-project.org/about.html">R-Project: What is R?</a>)</em></p>

<p>The <a href="https://en.wikipedia.org/wiki/R_(programming_language)">R programming language</a> is sometimes treated as <em>only</em> a statistics system instead of software. This treatment can sometimes lead to common issues in development which are experienced in other languages. Addressing R as software enables developers to enhance their work by taking benefit from existing concepts applied to many other languages.</p>

<h2 id="linting-with-r">Linting with R</h2>

<pre class="mermaid">
flowchart LR
  write\[Write R code] --&gt; |check| check\[Check code with linters]
  check --&gt; |revise| write
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p class="center"><em>Workflow loop depicting writing R code and revising with linters.</em></p>

<p>Software linting, or <a href="https://en.wikipedia.org/wiki/Static_program_analysis">static analysis</a>, is one way to ensure a minimum level of code quality without writing new tests. Linting checks how your code is structured without running it to make sure it abides by common language paradigms and logical structures. Using linting tools allows a developer to gain quick insights about their code before it is viewed or used by others.</p>

<p>One way to lint your R code is by using the <a href="https://github.com/r-lib/lintr"><code class="language-plaintext highlighter-rouge">lintr</code></a> package. The <code class="language-plaintext highlighter-rouge">lintr</code> package is also complementary of the <a href="https://github.com/r-lib/styler"><code class="language-plaintext highlighter-rouge">styler</code></a> pacakge, which formats the syntax of R code in a consistent way. Both of these can be used independently or as part of continuous quality checks for R code repositories.</p>

<h2 id="automated-linting-checks-with-r">Automated Linting Checks with R</h2>

<pre class="mermaid">
flowchart LR
  subgraph development
    write
    check
  end
  subgraph linters
    direction LR
    lintr
    styler
  end
  check &lt;-.- linters
  write\[Write R code] --&gt; |check| check\[Check code with pre-commit]
  check --&gt; |revise| write
</pre>

<p class="center"><em>Workflow showing development with pre-commit using multiple linters.</em></p>

<p><code class="language-plaintext highlighter-rouge">lintr</code> and <code class="language-plaintext highlighter-rouge">styler</code> can be incorporated into automated checks to help make sure linting (or other steps) are always used with new code. One tool which can help with this is <a href="https://pre-commit.com/">pre-commit</a>, which acts as both a local development tool in addition to providing observability within source control (more on this later).</p>

<p>Using pre-commit locally enables quick feedback loops using one or many checkers (such as <code class="language-plaintext highlighter-rouge">lintr</code>, <code class="language-plaintext highlighter-rouge">styler</code>, or others). Pre-commit may be used through the use of <a href="https://pre-commit.com/#usage">git hooks</a> or manually using <a href="https://pre-commit.com/#pre-commit-run"><code class="language-plaintext highlighter-rouge">pre-commit run ...</code></a> from a command-line. See <a href="https://github.com/lorenzwalthert/precommit">this example of pre-commit checks with R</a> for an example of multiple pre-commit checks for R code.</p>

<h2 id="continuous-and-observable-testing-for-r">Continuous and Observable Testing for R</h2>

<pre class="mermaid">
flowchart LR
  subgraph development [local development]
    direction LR
    write
    check
    commit
  end
  subgraph remote[Github repository]
    direction LR
    action["Check code (remotely)"]
  end
  write\[Write R code] --&gt; |check| check\[Check code with pre-commit]
  check --&gt; |revise| write
  check --&gt; commit[commit + push]
  commit --&gt; |optional trigger| action
  check -.-&gt; |perform same checks| action
</pre>

<p class="center"><em>Workflow showing pre-commit used as continuous testing tool with Github.</em></p>

<p>Pre-commit linting checks can also be incorporated into <a href="https://en.wikipedia.org/wiki/Continuous_testing">continuous testing</a> performed on your repository. One way to do this is using <a href="https://docs.github.com/en/actions">Github Actions</a>. Github Actions provides a programmatic way to specify automatic steps taken as changes occur to a repository.</p>

<p>Pre-commit provides <a href="https://github.com/pre-commit/action">an example Github Action</a> which will automatically check and alert repository maintainers when code challenges are detected. Using pre-commit in this way allows R developers to ensure <code class="language-plaintext highlighter-rouge">lintr</code> checks are performed on any new work checked into a repository. This can have benefits towards decreasing pull request (PR) review time and standardize how code collaboration takes place for R developers.</p>

<h2 id="resources">Resources</h2>

<p>Please see the following the resources on this topic.</p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/R_(programming_language)">R programming language</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Static_program_analysis">static analysis</a></li>
  <li><a href="https://github.com/r-lib/lintr">R package: lintr</a></li>
  <li><a href="https://github.com/r-lib/styler">R package: styler</a></li>
  <li><a href="https://pre-commit.com/">pre-commit</a></li>
  <li><a href="https://github.com/lorenzwalthert/precommit">Example of pre-commit checks with R</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Continuous_testing">continuous testing</a></li>
  <li><a href="https://docs.github.com/en/actions">Github Actions</a></li>
  <li><a href="https://github.com/pre-commit/action">an example Github Action</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="r" /><category term="static-analysis" /><category term="linting" /><category term="continuous-testing" /><summary type="html"><![CDATA[Tip of the Week: Software Linting with R]]></summary></entry><entry><title type="html">Tip of the Week: Timebox Your Software Work</title><link href="/set-website/preview/pr-25/2023/01/17/Timebox-Your-Software-Work.html" rel="alternate" type="text/html" title="Tip of the Week: Timebox Your Software Work" /><published>2023-01-17T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2023/01/17/Timebox-Your-Software-Work</id><content type="html" xml:base="/set-website/preview/pr-25/2023/01/17/Timebox-Your-Software-Work.html"><![CDATA[<h1 id="tip-of-the-week-timebox-your-software-work">Tip of the Week: Timebox Your Software Work</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p>Programming often involves long periods of problem solving which can sometimes lead to unproductive or exhausting outcomes. This article covers one way to avoid less productive time expense or protect yourself from overexhaustion through a technique called &#8220;timeboxing&#8221; (also sometimes referenced as &#8220;timeblocking&#8221;).</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Use timeboxing techniques such as <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro®</a> or <a href="https://en.wikipedia.org/wiki/52/17_rule">52/17</a> to help <a href="https://en.wikipedia.org/wiki/Modularity">modularize</a> your software work to ensure you don&#8217;t fall victim to <a href="https://en.wikipedia.org/wiki/Parkinson%27s_law">Parkinson&#8217;s Law</a>. Timeboxing may also map well to <a href="https://github.com/features/issues">Github Issues</a>, which allows your software tasks to be further aligned, documented, and chunked in collaboration with others.</p>

<h2 id="controlling-work-time-expansion">Controlling Work Time Expansion</h2>

<figure class="figure">
  <a class="figure-image" aria-label="Image depicting work as a creature with a timebox around it.">
    <img src="/set-website/preview/pr-25/images/work_timebox.png" style="
        width: auto;
        max-height: unset;
      " alt="Image depicting work as a creature with a timebox around it." loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Image depicting work as a creature with a timebox around it.

    </figcaption>
  
</figure>

<p class="center">Have you ever spent more time than you thought you would on a task? An adage which helps explain this phenomenon is <a href="https://www.economist.com/news/1955/11/19/parkinsons-law">Parkinson&#8217;s Law</a>:</p>

<blockquote>
  <p>&#8220;&#8230; work expands so as to fill the time available for its completion.&#8221;</p>
</blockquote>

<p>The practice of writing software is not protected from this &#8220;law&#8221;. It may be affected by it in sometimes worse ways during long periods of uninterrupted programming where we may have an inclination to forget productive goals.</p>

<p>One way to address this is through the use of <a href="https://en.wikipedia.org/wiki/Timeboxing">timeboxing</a> techiques. Timeboxing sets a fixed limit to the amount of time one may spend on a specific activity. One can use timeboxing to systematically address many tasks, for example, as with the <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro® Technique</a> (developed by Francesco Cirillo) or <a href="https://en.wikipedia.org/wiki/52/17_rule">52/17 rule</a>. While there are many ways to apply timeboxing, make sure to balance activity with short breaks and focus switches to help ensure we don&#8217;t become overwhelmed.</p>

<h2 id="timeboxing-means-modularization">Timeboxing Means Modularization</h2>

<p>Timeboxing has an auxiliary benefit of framing your work as objective and oftentimes smaller chunks (we have to know what we&#8217;re timeboxing in order to use this technique). Creating distinct chunks of work applies for both our daily time schedule as well as code itself. This concept is more broadly called &#8220;<a href="https://en.wikipedia.org/wiki/Modularity">modularization</a>&#8221; and helps to distinguish large portions of work (whether in real life or in code) as smaller and more maintainable chunks.</p>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Goals</span>
<span class="p">-</span> Finish writing paper<span class="sb">




</span></code></pre></div></div>

<p><em>Vague and possibly large task</em></p>

</div>
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Goals</span>
<span class="p">-</span> Finish writing paper
<span class="p">  -</span> Create paper outline
<span class="p">  -</span> Finish writing introduction
<span class="p">  -</span> Check for dead hyperlinks
<span class="p">  -</span> Request internal review
</code></pre></div></div>

<p><em>Modular and more understandable tasks</em></p>
</div>
  
</div>

<p>Breaking down large amounts of work as smaller chunks within our code helps to ensure long-term maintainability and understandability. Similarly, keeping our tasks small can help ensure our goals are achievable and understandable (to ourselves or others). Without this modularity, tasks can be impossible to achieve (subjective in nature) or very difficult to understand. Stated differently, taking many small steps can lead to a big change in an organized, oftentimes less exhausting way (<a href="https://www.fosslien.com/liz-fosslien-the-power-of-small-steps">related graphic</a>).</p>

<h2 id="version-control-and-timeboxing">Version Control and Timeboxing</h2>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Repo Issues</span>
<span class="p">-</span> "Prevent foo warning" - 20 minutes
<span class="p">-</span> "Remove bar feature" - 20 minutes
<span class="p">-</span> "Address baz error" - 20 minutes

</code></pre></div></div>

<p class="center"><em>List of example version control repository issues with associated time duration.</em></p>

<p>The parallels between the time we give a task and related code can work towards your benefit. For example, <a href="https://github.com/features/issues">Github Issues</a> can be created to outline a timeboxed task which relates to a distinct chunk of code to be created, updated, or fixed. Once development tasks have been outlined as issues, a developer can use timeboxing to help organize how much time to allocate on each issue.</p>

<p>Using Github Issues in this way provides a way to observe task progress associated with one or many repositories. It also increases collaborative opportunities for task sizing and description. For example, if a task looks too large to complete in a reasonable amount of time, developers may work together to break the task down into smaller modules of work.</p>

<h2 id="be-kind-to-yourself-take-breaks">Be Kind to Yourself: Take Breaks</h2>

<p>While timeboxing is often a conversation about how to be more productive, it&#8217;s also worth remembering: <strong>take breaks to be kind to yourself and more effective</strong>. Some studies and thought leadership have shown that taking breaks may be necessary to avoid performance decreases and impacts to your health. There&#8217;s also some indication that taking breaks may lead to better work. See below for just a few examples:</p>

<ul>
  <li><a href="https://thewellbeingthesis.org.uk/foundations-for-success/importance-of-taking-breaks-and-having-other-interests/">The Importance of Taking Breaks</a></li>
  <li><a href="https://www.sciencedirect.com/science/article/pii/S0010027710002994?via%3Dihub">Brief and rare mental “breaks” keep you focused: Deactivation and reactivation of task goals preempt vigilance decrements</a></li>
  <li><a href="https://pubmed.ncbi.nlm.nih.gov/24749966/">Give your ideas some legs: the positive effect of walking on creative thinking</a></li>
</ul>

<h2 id="additional-resources">Additional Resources</h2>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Parkinson%27s_law">Parkinson&#8217;s Law</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Timeboxing">Timeboxing</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Timeblocking">Timeblocking</a> Additional similar notes on time management.</li>
  <li><a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro® Technique</a></li>
  <li><a href="https://en.wikipedia.org/wiki/52/17_rule">52/17 Rule</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Modularity">Modularity</a></li>
  <li><a href="https://github.com/features/issues">Github Issues</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="timeboxing" /><category term="timeblocking" /><category term="productivity" /><category term="modularization" /><category term="projectmanagement" /><summary type="html"><![CDATA[Tip of the Week: Timebox Your Software Work]]></summary></entry><entry><title type="html">Tip of the Week: Linting Documentation as Code</title><link href="/set-website/preview/pr-25/2023/01/03/Linting-Documentation-as-Code.html" rel="alternate" type="text/html" title="Tip of the Week: Linting Documentation as Code" /><published>2023-01-03T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2023/01/03/Linting-Documentation-as-Code</id><content type="html" xml:base="/set-website/preview/pr-25/2023/01/03/Linting-Documentation-as-Code.html"><![CDATA[<h1 id="tip-of-the-week-linting-documentation-as-code">Tip of the Week: Linting Documentation as Code</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p><a href="https://en.wikipedia.org/wiki/Software_documentation">Software documentation</a> is sometimes treated as a less important or secondary aspect of software development. Treating documentation as code allows developers to version control the shared understanding and knowledge surrounding a project. Leveraging this paradigm also enables the use of tools and patterns which have been used to strengthen code maintenance. This article covers one such pattern: <a href="https://en.wikipedia.org/wiki/Lint_(software)">linting</a>, or static analysis, for documentation treated like code.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
There are many linting tools available which enable quick revision of your documentation. Try using <a href="https://github.com/codespell-project/codespell">codespell</a> for spelling corrections, <a href="https://github.com/executablebooks/mdformat">mdformat</a> for markdown file formatting corrections, and <a href="https://vale.sh/">vale</a> for more complex editorial style or natural language assessment within your documentation.</p>

<h2 id="spelling-checks">Spelling Checks</h2>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--- readme.md ---&gt;</span>
<span class="gu">## Example Readme</span>

Thsi project is a wokr in progess.
Code will be updated by the team very often.

(CU Anschutz)[https://www.cuanschutz.edu/]
</code></pre></div></div>

<p><em>Example readme.md with incorrectly spelled words</em></p>
</div>
  
    
    <div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">% codespell readme.md
</span><span class="gp">readme.md:4: Thsi ==&gt;</span><span class="w"> </span>This
<span class="gp">readme.md:4: wokr ==&gt;</span><span class="w"> </span>work
<span class="gp">readme.md:4: progess ==&gt;</span><span class="w"> </span>progress
<span class="go">


</span></code></pre></div></div>

<p><em>Example showing codespell detection of mispelled words</em></p>
</div>
  
</div>

<p><a href="https://en.wikipedia.org/wiki/Spell_checker">Spelling checks</a> may be used to automatically detect incorrect spellings of words within your documentation (and code!). <a href="https://github.com/codespell-project/codespell">Codespell</a> is one library which can lint your word spelling. Codespell may be used through the command-line and also through a <a href="https://pre-commit.com/index.html">pre-commit</a> hook.</p>

<h2 id="markdown-format-linting">Markdown Format Linting</h2>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--- readme.md ---&gt;</span>
<span class="gu">## Example Readme</span>

This project is a work in progress.
Code will be updated by the team very often.

(CU Anschutz)[https://www.cuanschutz.edu/]
</code></pre></div></div>

<p><em>Example readme.md with markdown issues</em></p>
</div>
  
    
    <div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">% markdownlint readme.md
readme.md:2 MD041/first-line-heading/first-line-h1
First line in a file should be a top-level heading
</span><span class="gp">[Context: "#</span><span class="c"># Example Readme"]</span>
<span class="go">readme.md:6:5 MD011/no-reversed-links Reversed link
syntax [(link)[https://www.cuanschutz.edu/]]

</span></code></pre></div></div>

<p><em>Example showing markdownlint detection of issues</em></p>
</div>
  
</div>

<p>The format of your documentation files may also be linted for common issues. This may catch things which are otherwise hard to see when editing content. It may also improve the overall <a href="https://en.wikipedia.org/wiki/Web_accessibility">web accessibility</a> of your content, for example, through proper HTML header order and image alternate text. <a href="https://github.com/markdownlint/markdownlint">Markdownlint</a> is one library which can be used to find issues within markdown files.</p>

<p>Additional and similar resources to explore in this area:</p>

<ul>
  <li><a href="https://github.com/twolfson/restructuredtext-lint">restructuredtext-lint</a> - for linting RST files</li>
  <li><a href="https://github.com/executablebooks/mdformat">mdformat</a> - an additional markdown linter</li>
</ul>

<h2 id="editorial-style-and-grammar">Editorial Style and Grammar</h2>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--- readme.md ---&gt;</span>
<span class="gh"># Example Readme</span>

This project is a work in progress.
Code will be updated by the team very often.

<span class="p">[</span><span class="nv">CU Anschutz</span><span class="p">](</span><span class="sx">https://www.cuanschutz.edu/</span><span class="p">)</span>
</code></pre></div></div>

<p><em>Example readme.md with questionable editorial style</em></p>
</div>
  
    
    <div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">% vale readme-example.md
readme-example.md
2:12  error    Did you really mean 'Readme'?   Vale.Spelling
5:11  warning  'be updated' may be passive     write-good.Passive
               voice. Use active voice if you
               can.
5:34  warning  'very' is a weasel word!        write-good.Weasel
</span></code></pre></div></div>

<p><em>Example showing vale warnings and errors</em></p>
</div>
  
</div>

<p>Maintaining consistent editorial style and grammar may also be a focus within your documentation. These issues are sometimes more difficult to detect and more opinionated in nature. In some cases, organizations publish guides on this topic (see <a href="https://learn.microsoft.com/en-us/style-guide/welcome/">Microsoft Writing Style Guide</a>, or <a href="https://developers.google.com/style">Google Developer Documenation Style Guide</a>). Some of the complexity of writing style may be linted through tools like <a href="https://vale.sh/">Vale</a>. Using common configurations through Vale can unify how language is used within your documentation by linting for common style and grammar.</p>

<p>Additional and similar resources to explore in this area:</p>

<ul>
  <li><a href="https://textlint.github.io/">textlint</a> - similar to Vale with a modular approach</li>
</ul>

<h2 id="resources">Resources</h2>

<p>Please see the following the resources on this topic.</p>

<ul>
  <li><a href="https://github.com/codespell-project/codespell">codespell</a> - a code and documentation spell checker.</li>
  <li><a href="https://github.com/markdownlint/markdownlint">markdownlint</a> - markdown linter.</li>
  <li><a href="https://github.com/executablebooks/mdformat">mdformat</a> - another markdown linter.</li>
  <li><a href="https://github.com/twolfson/restructuredtext-lint">restructuredtext-lint</a> - RST file format linter.</li>
  <li><a href="https://vale.sh/">vale</a> - an editorial style linter.</li>
  <li><a href="https://textlint.github.io/">textlint</a> - another editorial style linter with greater modularity.</li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="documentation" /><category term="docsascode" /><category term="linting" /><category term="staticanalysis" /><summary type="html"><![CDATA[Tip of the Week: Linting Documentation as Code]]></summary></entry><entry><title type="html">Tip of the Week: Remove Unused Code to Avoid Software Decay</title><link href="/set-website/preview/pr-25/2022/12/12/Remove-Unused-Code-to-Avoid-Decay.html" rel="alternate" type="text/html" title="Tip of the Week: Remove Unused Code to Avoid Software Decay" /><published>2022-12-12T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2022/12/12/Remove-Unused-Code-to-Avoid-Decay</id><content type="html" xml:base="/set-website/preview/pr-25/2022/12/12/Remove-Unused-Code-to-Avoid-Decay.html"><![CDATA[<h1 id="tip-of-the-week-remove-unused-code-to-avoid-software-decay">Tip of the Week: Remove Unused Code to Avoid Software Decay</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p>The act of creating software often involves many iterations of writing, personal collaborations, and testing. During this process it&#8217;s common to lose awareness of code which is no longer used, and thus may not be tested or otherwise linted. Unused code may contribute to <a href="https://en.wikipedia.org/wiki/Software_rot">&#8220;software decay&#8221;</a>, the gradual diminishment of code quality or functionality. This post will cover software decay and strategies for addressing unused code to help keep your code quality high.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Unused code is easy to amass and may cause your code quality or code functionality to diminish (&#8220;decay&#8221;) over time. Effort must be taken to maintain any code or artifacts you add to your repositories, including those which are unused. Consider using <a href="https://github.com/jendrikseipp/vulture">Vulture</a>, <a href="https://pylint.pycqa.org/">Pylint</a>, or <a href="https://coverage.readthedocs.io/">Coverage</a> to help illuminate sections of your code which may need to be removed.</p>

<h2 id="code-lifecycle-and-maintenance">Code Lifecycle and Maintenance</h2>

<pre class="mermaid">
stateDiagram
    direction LR
    removal : removed or archived
    changes : changes needed
    [*] --&gt; added
    added --&gt; maintenance
    state maintenance {
      direction LR
      updated --&gt; changes
      changes --&gt; updated
    }
    maintenance --&gt; removal
    removal --&gt; [*]
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p><em>Diagram showing code lifecycle activities.</em></p>

<p>Adding code to a project involves a loose agreement to maintenance for however long the code is available. The maintenance of the code can involve added efforts in changes as well as passive impacts like longer test durations or decreased readability (simply from more code).</p>

<div id="vis" class="center"></div>

<script src="https://cdn.jsdelivr.net/npm/vega@5.22.1"></script>

<script src="https://cdn.jsdelivr.net/npm/vega-lite@5.6.0"></script>

<script src="https://cdn.jsdelivr.net/npm/vega-embed@6.21.0"></script>

<script>
var spec = {
    "$schema": "https://vega.github.io/schema/vega-lite/v5.5.0.json",
    "description": "A simple line chart to demonstrate lines of code and associated theoretical time cost.",
    "title":"Time Cost per Line of Code",
    "width": 500,
    "height": 200,
    "config": {
      "title":{"fontSize":14},
      "axisY":{"titleFontSize":14, "labelFontSize":12},
      "axisX":{"titleFontSize":14, "labelFontSize":12}
    },
    "data": {
      "values": [
        {"x": 1, "y": 28},
        {"x": 1000, "y": 500}
      ]
    },
    "mark": {"type": "line", "point": {"filled": false,
      "fill": "white", "size":50
    }},
    "encoding": {
      "x": {"title": "Lines of Code", "field": "x", "type": "quantitative", "scale": {"domain": [1, 1000]}
      },
      "y": {"title": "Time (minutes)", "field": "y", "type": "quantitative", "scale": {"domain": [1, 500]}}
    }
  }
const embed_opt = {"mode": "vega-lite"};
const el = document.getElementById('vis');
const view = vegaEmbed("#vis", spec, embed_opt);
</script>

<p>When considering multiple parts of code in many files, this maintenance can become untenable, leading to the gradual decay of your code quality or functionality. For example, let&#8217;s assume one line of code costs 30 seconds to maintain (feel free to substitute time with monetary or personnel aspects as an example measure here too). 1000 lines of code would cost 500 minutes (or about 8 hours) to maintain. This becomes more complex when considering multiple files, collaborators, or languages.</p>

<p class="center"><i class="fas fa-hiking" style="font-size:4em;"></i></p>

<p>Think about your project as if it were on a hiking trail: <strong>&#8220;Carry as little as possible, but choose that little with care.&#8221;</strong> (Earl Shaffer). Be careful what code you choose to carry; it may impact your ability to address needs over time and lead to otherwise unintended software decay.</p>

<h2 id="detecting-unused-code-with-vulture">Detecting Unused Code with Vulture</h2>

<p>Understanding the cost of added content, it&#8217;s important to routinely examine which parts of your code are still necessary. You can prepare your code for a long journey by detecting (and removing) unused code with various automated tools. These tools are generally designed for static analysis and linting, meaning they may also be incorporated into automated and routine testing.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vulture unused_code_example.py
unused_code_example.py:3: unused import <span class="s1">'os'</span> <span class="o">(</span>90% confidence<span class="o">)</span>
unused_code_example.py:4: unused import <span class="s1">'pd'</span> <span class="o">(</span>90% confidence<span class="o">)</span>
unused_code_example.py:7: unused <span class="k">function</span> <span class="s1">'unused_function'</span> <span class="o">(</span>60% confidence<span class="o">)</span>
unused_code_example.py:14: unused variable <span class="s1">'unused_var'</span> <span class="o">(</span>60% confidence<span class="o">)</span>
</code></pre></div></div>

<p><em>Example of Vulture command line usage to discover unused code.</em></p>

<p><a href="https://github.com/jendrikseipp/vulture">Vulture</a> is one tool dedicated to finding unused python code. Vulture provides both a command line interface and Python API for discovering unused code. It also provide a rough confidence to show how certain it was about whether the block of code was unused. See the following interactive example for a demonstration of using Vulture.</p>

<p><a href="https://cu-dbmi.github.io/notebooks/lab?path=unused_code_detection.ipynb">Interactive Example on Unused Code Detection</a></p>

<h2 id="further-code-usefulness-detection-with-pylint-and-coveragepy">Further Code Usefulness Detection with Pylint and Coverage.py</h2>

<p>In addition to Vulture, <a href="https://pylint.pycqa.org/en/latest/index.html">Pylint</a> and <a href="https://coverage.readthedocs.io/">Coverage.py</a> can be used in a similar way to help show where code may not have been used within your project.</p>

<p><a href="https://pylint.pycqa.org/en/latest/index.html">Pylint</a> focuses on code style and other static analysis in addition to unused variables. See <a href="https://pylint.pycqa.org/en/latest/user_guide/checkers/features.html">Pylint&#8217;s Checkers</a> page for more details here, using &#8220;unused-*&#8221; as a reference to checks it performs which focus on unused code.</p>

<p><a href="https://coverage.readthedocs.io/">Coverage.py</a> helps show you which parts of your code have been executed or not. A common usecase for Coverage involves measuring &#8220;test coverage&#8221;, or which parts of your code are executed in relationship to tests written for that code. This provides another perspective on code utility: if there&#8217;s not a test for the code, is it worth keeping?</p>

<h2 id="additional-resources">Additional Resources</h2>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Software_rot">Software Rot</a></li>
  <li><a href="https://github.com/jendrikseipp/vulture">Vulture</a></li>
  <li><a href="https://pylint.pycqa.org/en/latest/index.html">Pylint</a></li>
  <li><a href="https://coverage.readthedocs.io/">Coverage</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="code-quality" /><category term="software-decay" /><category term="code-decay" /><category term="vulture" /><category term="pylint" /><category term="coverage.py" /><summary type="html"><![CDATA[Tip of the Week: Remove Unused Code to Avoid Software Decay]]></summary></entry><entry><title type="html">Tip of the Week: Data Engineering with SQL, Arrow and DuckDB</title><link href="/set-website/preview/pr-25/2022/12/05/Data-Engineering-with-SQL-Arrow-and-DuckDB.html" rel="alternate" type="text/html" title="Tip of the Week: Data Engineering with SQL, Arrow and DuckDB" /><published>2022-12-05T00:00:00+00:00</published><updated>2023-10-31T11:14:19+00:00</updated><id>/set-website/preview/pr-25/2022/12/05/Data-Engineering-with-SQL-Arrow-and-DuckDB</id><content type="html" xml:base="/set-website/preview/pr-25/2022/12/05/Data-Engineering-with-SQL-Arrow-and-DuckDB.html"><![CDATA[<h1 id="tip-of-the-week-data-engineering-with-sql-arrow-and-duckdb">Tip of the Week: Data Engineering with SQL, Arrow and DuckDB</h1>

<div class="alert" style="--color: #0ea5e9">
  
  <i class="icon fa-solid fa-circle-info"></i>
  <div class="alert-content">
    
<p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views
expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you
have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to
#software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>

  </div>
</div>

<!-- excerpt start -->

<p><a href="https://arrow.apache.org/">Apache Arrow</a> is a language-independent and high performance data format useful in many scenarios. <a href="https://duckdb.org/">DuckDB</a> is an in-process <a href="https://en.wikipedia.org/wiki/SQL">SQL</a>-based data management system which is Arrow-compatible. In addition to providing a <a href="https://sqlite.org/index.html">SQLite</a>-like database format, DuckDB also provides a standardized and high performance way to work with Arrow data where otherwise one may be forced to language-specific data structures or transforms.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
DuckDB may be used to access and transform Arrow-based data from multiple data formats through SQL. Using Arrow and DuckDB provides a cross-language way to access and manage data. Data development with these tools may also enable improvements in performance, understandability, or long term maintainability of your code.</p>

<h2 id="reduce-wasted-conversion-effort-with-arrow">Reduce Wasted Conversion Effort with Arrow</h2>

<pre class="mermaid">
flowchart TB
    Python:::outlined &lt;--&gt; Arrow
    R:::outlined &lt;--&gt; Arrow
    C++:::outlined &lt;--&gt; Arrow
    Java:::outlined &lt;--&gt; Arrow
    others...:::outlined &lt;--&gt; Arrow

    classDef outlined fill:#fff,stroke:#333
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p>Arrow provides a <a href="https://arrow.apache.org/docs/">multi-language</a> data format which prevents you from needing to convert to other formats when dealing with multiple in-memory or serialized data formats. For example, this means that a Python and an R package may use the same in-memory or file-based data without conversion (where normally a Python Pandas dataframe and R data frame may require a conversion step in between).</p>

<pre class="mermaid">
flowchart TB
    subgraph Python
      Pandas:::outlined
      Polars:::outlined
      dict[Python dict]:::outlined
      list[Python list]:::outlined
    end

    Pandas &lt;--&gt; Arrow
    Polars &lt;--&gt; Arrow
    dict &lt;--&gt; Arrow
    list &lt;--&gt; Arrow

  classDef outlined fill:#fff,stroke:#333
</pre>

<p>The same stands for various libraries within one language - Arrow enables interchange between various language library formats (for example, a Python Pandas dataframe and Python dictionary are two distinct in-memory formats which may require conversions). Conversions to or from these formats can involve data type or other inferences which are costly to productivity. You can save time and effort by avoiding conversions using Arrow.</p>

<h2 id="using-sql-to-join-or-transform-arrow-data-via-duckdb">Using SQL to Join or Transform Arrow Data via DuckDB</h2>

<pre class="mermaid">
flowchart LR
    subgraph duckdb["DuckDB Processing"]
        direction BT
        SQL[SQL] --&gt; DuckDB[DuckDB Client]
    end
    parquet1[example.parquet] --&gt; duckdb
    sqlite[example.sqlite] --&gt; duckdb
    csv[example.csv] --&gt; duckdb
    arrow["in-memory Arrow"] --&gt; duckdb
    pandas["in-memory Pandas"] --&gt; duckdb
    duckdb --&gt; Arrow
    Arrow --&gt; Other[Other work...]
</pre>

<p>DuckDB provides a management client and relational database format (similar to SQLite databases) which may be handled with Arrow. SQL may be used with the DuckDB client to filter, join, or change various data types. Due to Arrow&#8217;s cross-language properties, there is no additional cost to using SQL through DuckDB to return data for implementation within other purpose-built data formats. <a href="https://duckdb.org/docs/api/overview">DuckDB provides client API&#8217;s in many languages</a> (for example, Python, R, and C++), making it possible to write DuckDB client code with SQL to manage data without having to use manually written sub-procedures.</p>

<pre class="mermaid">
flowchart TB
  subgraph duckdb["DuckDB Processing"]
        direction BT
        SQL[SQL] --&gt; DuckDB[DuckDB Client]
    end
    Python:::outlined &lt;--&gt; duckdb
    R:::outlined &lt;--&gt; duckdb
    C++:::outlined &lt;--&gt; duckdb
    Java:::outlined &lt;--&gt; duckdb
    others...:::outlined &lt;--&gt; duckdb
    duckdb &lt;--&gt; Arrow

    classDef outlined fill:#fff,stroke:#333
</pre>

<p>Using SQL to perform these operations with Arrow provides an opportunity for your data code to be used (or understood) within other languages without additional rewrites. SQL also provides you access to roughly 48 years worth of data management improvements without being constrained by imperative language data models or schema (reference: <a href="https://en.wikipedia.org/wiki/SQL">SQL Wikipedia: <em>First appeared: 1974</em></a>).</p>

<h2 id="example-with-sql-to-join-arrow-data-with-duckdb-in-python">Example with SQL to Join Arrow Data with DuckDB in Python</h2>

<figure class="figure">
  <a class="figure-image" aria-label="Jupyter notebook example screenshot with DuckDB and Arrow data handling">
    <img src="/set-website/preview/pr-25/images/duckdb_arrow_query_example.png" style="
        width: 500px;
        max-height: unset;
      " alt="Jupyter notebook example screenshot with DuckDB and Arrow data handling" loading="lazy" onerror="this.src = '/set-website/preview/pr-25/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Jupyter notebook example screenshot with DuckDB and Arrow data handling

    </figcaption>
  
</figure>

<p>The following example notebook shows how to use SQL to join data from multiple sources using the DuckDB client API within Python. The example includes DuckDB querying a remote CSV, local Parquet file, and Arrow in-memory tables.</p>

<p><a href="https://github.com/CU-DBMI/notebooks/blob/main/content/arrow_and_duckdb_example.ipynb">Linked Example</a></p>

<h2 id="additional-resources">Additional Resources</h2>

<p>Please see the following the additional resources.</p>

<ul>
  <li><a href="https://arrow.apache.org/docs/index.html">Apache Arrow Documentation</a></li>
  <li><a href="https://duckdb.org/docs/">DuckDB Documentation</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="data" /><category term="sql" /><category term="dataframes" /><category term="arrow" /><category term="duckdb" /><summary type="html"><![CDATA[Tip of the Week: Data Engineering with SQL, Arrow and DuckDB]]></summary></entry></feed>