<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/set-website/preview/pr-20/feed.xml" rel="self" type="application/atom+xml" /><link href="/set-website/preview/pr-20/" rel="alternate" type="text/html" /><updated>2023-06-09T18:16:33+00:00</updated><id>/set-website/preview/pr-20/feed.xml</id><title type="html">Software Engineering Team</title><subtitle>The software engineering team of the Department of Biomedical Informatics at the University of Colorado Anschutz</subtitle><entry><title type="html">Tip of the Week: Automate Software Workflows with GitHub Actions</title><link href="/set-website/preview/pr-20/2023/03/15/Automate-Software-Workflows-with-Github-Actions.html" rel="alternate" type="text/html" title="Tip of the Week: Automate Software Workflows with GitHub Actions" /><published>2023-03-15T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2023/03/15/Automate-Software-Workflows-with-Github-Actions</id><content type="html" xml:base="/set-website/preview/pr-20/2023/03/15/Automate-Software-Workflows-with-Github-Actions.html"><![CDATA[<h1 id="tip-of-the-week-automate-software-workflows-with-github-actions">Tip of the Week: Automate Software Workflows with GitHub Actions</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p>There are many routine tasks which can be automated to help save time and increase reproducibility in software development. GitHub Actions provides one way to accomplish these tasks using code-based workflows and related workflow implementations. This type of automation is commonly used to perform tests, builds (preparing for the delivery of the code), or delivery itself (sending the code or related artifacts where they will be used).</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Use <a href="https://docs.github.com/en/actions">GitHub Actions</a> to perform <a href="https://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> work automatically by leveraging <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">Github&#8217;s workflow specification</a> and the <a href="https://github.com/marketplace?type=actions">existing marketplace of already-created Actions</a>. You can test these workflows with <a href="https://github.com/nektos/act">Act</a>, which can enhance development with this feature of Github. Consider making use of <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere">&#8220;write once, run anywhere&#8221; (WORA)</a> and <a href="https://docs.dagger.io/">Dagger</a> in conjunction with GitHub Actions to enable reproducible workflows for your software projects.</p>

<h2 id="workflows-in-software">Workflows in Software</h2>

<pre class="mermaid">
flowchart LR
  start((start)) --&gt; action
  action["action(s)"] --&gt; en((end))
  style start fill:#6EE7B7
  style en fill:#FCA5A5
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p class="center"><em>An example workflow.</em></p>

<p><a href="https://en.wikipedia.org/wiki/Workflow">Workflows</a> consist of sequenced activities used by various systems. Software development  workflows help accomplish work the same way each time by using what are commonly called &#8220;workflow engines&#8221;. Generally, workflow engines are provided code which indicate beginnings (what triggers a workflow to begin), actions (work being performed in sequence), and an ending (where the workflow stops). There are <a href="https://s.apache.org/existing-workflow-systems">many workflow engines</a>, including some which help accomplish work alongside version control.</p>

<h2 id="github-actions">GitHub Actions</h2>

<pre class="mermaid">
flowchart LR
  subgraph workflow [GitHub Actions Workflow Run]
    direction LR
    action["action(s)"] --&gt; en((end))
    start((event\ntrigger))
  end
  start --&gt; action
  style start fill:#6EE7B7
  style en fill:#FCA5A5
</pre>

<p class="center"><em>A diagram showing GitHub Actions as a workflow.</em></p>

<p><a href="https://docs.github.com/en/actions">GitHub Actions</a> is a feature of GitHub which allows you to run workflows in relation to your code as a <a href="https://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> (including automated testing, builds, and deployments) and general automation tool. For example, one can use GitHub Actions to make sure code related to a <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">GitHub Pull Request</a> passes certain tests before it is allowed to be merged. GitHub Actions may be specified using <a href="https://en.wikipedia.org/wiki/YAML">YAML files</a> within your repository&#8217;s <code class="language-plaintext highlighter-rouge">.github/workflows</code> directory by using syntax specific to <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">Github&#8217;s workflow specification</a>. Each YAML file under the <code class="language-plaintext highlighter-rouge">.github/workflows</code> directory can specify workflows to accomplish tasks related to your software work. GitHub Actions workflows may be customized to your own needs, or use an <a href="https://github.com/marketplace?type=actions">existing marketplace of already-created Actions</a>.</p>

<figure class="figure">
  <a class="figure-image" aria-label="Image showing GitHub Actions tab on GitHub website.">
    <img src="/set-website/preview/pr-20/images/github_actions_tab.png" style="
        width: auto;
        max-height: unset;
      " alt="Image showing GitHub Actions tab on GitHub website." loading="lazy" onerror="this.src = '/set-website/preview/pr-20/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Image showing GitHub Actions tab on GitHub website.

    </figcaption>
  
</figure>

<p>GitHub provides an <a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#viewing-the-activity-for-a-workflow-run">&#8220;Actions&#8221; tab</a> for each repository which helps visualize and control Github Actions workflow runs. This tab shows a history of all workflow runs in the repository. For each run, it shows whether it was run successful or not, the associated logs, and controls to cancel or re-run it.</p>

<blockquote>
  <p><strong>GitHub Actions Examples</strong>
GitHub Actions is sometimes better understood with examples. See the following references for a few basic examples of using GitHub Actions in a simulated project repository.</p>

  <ul>
    <li><a href="https://github.com/CU-DBMI/demo-github-actions/blob/main/.github/workflows/1.example-action.yml">1.example-action.yml</a>: demonstrates how to run a snippet of Python code in a basic GitHub Actions workflow.</li>
    <li><a href="https://github.com/CU-DBMI/demo-github-actions/blob/main/.github/workflows/2.run-python-file.yml">2.run-python-file.yml</a>: demonstrates how to reliably reproduce the environment by installing dependencies using <a href="https://python-poetry.org/docs/">Poetry</a>, and then run a Python file in that environment.</li>
    <li><a href="https://github.com/CU-DBMI/demo-github-actions/blob/main/.github/workflows/3.run-matrixed-pytest-ghactions.yml">3.run-matrixed-pytest-ghactions.yml</a>: demonstrates how to run pytest tests against multiple versions of Python (i.e., &#8220;matrixed&#8221; Python versions) using GitHub Actions with a <a href="https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs">matrix strategy</a>.</li>
  </ul>
</blockquote>

<h2 id="testing-with-act">Testing with Act</h2>

<pre class="mermaid">
flowchart LR
  subgraph container ["local simulation container(s)"]
    direction LR
    subgraph workflow [GitHub Actions Workflow Run]
      direction LR
      start((event\ntrigger))
      action --&gt; en((end))
    end
  end
  start --&gt; action
  act\[Run Act] -.-&gt; |Simulate\ntrigger| start
  style start fill:#6EE7B7
  style en fill:#FCA5A5
</pre>

<p class="center"><em>A diagram showing how GitHub Actions workflows may be triggered from Act</em></p>

<p>One challenge with GitHub Actions is a lack of standardized local testing tools. For example, how will you know that a new GitHub Actions workflow will function as expected (or at all) without pushing to the GitHub repository? One third-party tool which can help with this is <a href="https://github.com/nektos/act">Act</a>. Act uses <a href="https://github.com/nektos/act#runners">Docker images</a> which require <a href="https://docs.docker.com/desktop/">Docker Desktop</a> to simulate what running a GitHub Action workflow within your local environment. Using Act can sometimes avoid guessing what will occur when a GitHub Action worklow is added to your repository. See <a href="https://github.com/nektos/act#installation">Act&#8217;s installation documentation</a> for more information on getting started with this tool.</p>

<h2 id="nested-workflows-with-github-actions">Nested Workflows with GitHub Actions</h2>

<pre class="mermaid">
flowchart LR

  subgraph action ["Nested Workflow (Dagger, etc)"]
    direction LR
    actions
    start2((start)) --&gt; actions
    actions --&gt; en2((end))
    en2((end))
  end
  subgraph workflow2 [Local Environment Run]
    direction LR
    run2[run workflow]
    en3((end))
    start3((event\ntrigger))
  end
  subgraph workflow [GitHub Actions Workflow Run]
    direction LR
    start((event\ntrigger))
    run[run workflow]
    en((end))
  end
  
  start --&gt; run
  start3 --&gt; run2
  action -.-&gt; run
  run --&gt; en
  run2 --&gt; en3
  action -.-&gt; run2
  style start fill:#6EE7B7
  style start2 fill:#D1FAE5
  style start3 fill:#6EE7B7
  style en fill:#FCA5A5
  style en2 fill:#FFE4E6
  style en3 fill:#FCA5A5
</pre>

<p class="center"><em>A diagram showing how GitHub Actions may leverage nested workflows with tools like Dagger.</em></p>

<p>There are times when GitHub Actions may be too constricting or Act may not accurately simulate workflows. We also might seek to <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere">&#8220;write once, run anywhere&#8221; (WORA)</a> to enable flexible development on many environments. One workaround to this challenge is to use nested workflows which are compatible with local environments and GitHub Actions environments. <a href="https://docs.dagger.io/">Dagger</a> is one tool which enables programmatically specifying and using workflows this way. Using Dagger allows you to trigger workflows on your local machine or GitHub Actions with the same underlying engine, meaning there are fewer inconsistencies or guesswork for developers (see here for <a href="https://docs.dagger.io/cli#how-does-it-work">an explanation of how Dagger works</a>).</p>

<p>There are also other alternatives to Dagger you may want to consider based on your usecase, preference, or interest. <a href="https://github.com/earthly/earthly">Earthly</a> is similar to Dagger and uses &#8220;earthfiles&#8221; as a specification. Both Dagger and Earthly (in addition to GitHub Actions) use container-based approaches, which in-and-of themselves present additional alternatives outside the scope of this article.</p>

<blockquote>
  <p><strong>GitHub Actions with Nested Workflow Example</strong>
Reference this example for a brief demonstration of how GitHub Actions and Dagger may be used together.</p>

  <ul>
    <li><a href="https://github.com/CU-DBMI/demo-github-actions/blob/main/.github/workflows/4.run-matrixed-pytest-dagger.yml">4.run-matrixed-pytest-dagger.yml</a>: demonstrates how to run matrixed Python versions for confirming passing pytest tests using GitHub Actions and Dagger together. A <a href="https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs">GitHub Actions matrix strategy</a> is used to span concurrent work while retaining the reproducibility from Dagger task specification.</li>
  </ul>
</blockquote>

<h2 id="closing-remarks">Closing Remarks</h2>

<p>Using GitHub Actions through the above methods can help automate your technical work and increase the quality of your code with sometimes very little additional effort. Saving time through this form of automation can provide additional flexibility accomplish more complex work which requires your attention (perhaps <a href="https://cu-dbmi.github.io/set-website/2023/01/17/Timebox-Your-Software-Work.html">using timeboxing techniques</a>). Even small amounts of time saved can turn into large opportunities for other work. On this note, be sure to explore how GitHub Actions can improve things for your software endeavors.</p>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="github" /><category term="workflow" /><category term="github-actions" /><category term="continuous-integration" /><summary type="html"><![CDATA[Tip of the Week: Automate Software Workflows with GitHub Actions]]></summary></entry><entry><title type="html">Tip of the Week: Branch, Review, and Learn</title><link href="/set-website/preview/pr-20/2023/02/13/Branch-Review-and-Learn.html" rel="alternate" type="text/html" title="Tip of the Week: Branch, Review, and Learn" /><published>2023-02-13T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2023/02/13/Branch-Review-and-Learn</id><content type="html" xml:base="/set-website/preview/pr-20/2023/02/13/Branch-Review-and-Learn.html"><![CDATA[<h1 id="tip-of-the-week-branch-review-and-learn">Tip of the Week: Branch, Review, and Learn</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p>Git provides a feature called <a href="https://git-scm.com/docs/git-branch">branching</a> which facilitates parallel and segmented programming work through <a href="https://git-scm.com/docs/git-commit">commits</a> with version control. Using branching enables both work concurrency (multiple people working on the same repository at the same time) as well as a chance to isolate and review specific programming tasks. This article covers some conceptual best practices with branching, reviewing, and merging code using Github.</p>

<!-- excerpt end -->

<p><strong>Please note:</strong> the content below represents one opinion in a larger space of Git workflow concepts (it&#8217;s not perfect!). Developer cultures may vary on these topics; be sure to acknowledge people and culture over exclusive or absolute dedication to what is found below.</p>

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Use <a href="https://www.atlassian.com/git/tutorials/using-branches">git branching techniques</a> to segment the completion of programming tasks, gradually and consistently committing small changes (practicing <a href="https://en.wikipedia.org/wiki/Festina_lente"><em>festina lente</em> or &#8220;make haste, slowly&#8221;</a>). When a group of small changes are ready from branches, request <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request">pull request reviews</a> and take advantage of <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request">comments</a> to <a href="https://en.wikipedia.org/wiki/Continual_improvement_process">continuously improve</a> the work. Prepare for a branch <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request">merge</a> after review by deciding <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github">which merge strategy</a> is appropriate and automating merge requirements with <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches">branch protection rules</a>.</p>

<h2 id="concept-coursework-branching">Concept: Coursework Branching</h2>

<pre class="mermaid">
flowchart LR
 subgraph Course
    direction LR
    open["open\nassignment"]
    turn_in["review\nassignment"]
  end
  subgraph Student ["&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student"]
    direction LR
    work["completed\nassignment"]
  end
  open -.-&gt; turn_in
  open --&gt; |works towards| work
  work --&gt; |seeks review| turn\_in
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p class="center"><em>An example course and student assignment workflow.</em></p>

<p><a href="https://www.atlassian.com/git/tutorials/using-branches">Git branching</a> practices may be understood in context with similar workflows from real life. Consider a student taking a course, where an assignment is given to them to complete. In addition to the steps shown in the diagram above, it&#8217;s important to think about <em>why</em> this pattern is beneficial:</p>

<ul>
  <li>Completing an assignment allows us as social, inter-dependent beings to present new findings which enable learning and amalgamation of additional ideas from others.</li>
  <li>The timebound nature of assignments enables us to practice some form of <a href="https://cu-dbmi.github.io/set-website/2023/01/17/Timebox-Your-Software-Work.html">timeboxing</a> so as to minimize tasks which may take too much time.</li>
  <li>Segmenting applied learning in distinct, goal-orientated chunks helps make larger topics easier to understand.</li>
</ul>

<h2 id="branching-to-complete-an-assignment">Branching to Complete an &#8220;Assignment&#8221;</h2>

<pre class="mermaid">
%%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {
      'git0': '#4F46E5',
      'git1': '#10B981',
      'gitBranchLabel1': '#ffffff'
} } }%%
    gitGraph
       commit id: "..."
       commit id: "opened"
       branch assignment
       checkout assignment
       commit id: "completed"
       checkout main
</pre>

<p class="center"><em>An example git diagram showing assignment branch based off main.</em></p>

<p>Following the course assignment workflow, the diagram above shows an in-progress <code class="language-plaintext highlighter-rouge">assignment</code> branch based off of the <code class="language-plaintext highlighter-rouge">main</code> branch. When the <code class="language-plaintext highlighter-rouge">assignment</code> branch is created, we bring into it everything we know from <code class="language-plaintext highlighter-rouge">main</code> (the course) so far in the form of <a href="https://github.com/git-guides/git-commit">commits</a>, or groups of changes to various files. <a href="https://github.com/git-guides#create-a-branch">Branching</a> allows us to make consistent and well described changes based on what&#8217;s already happened without impacting others work in the meantime.</p>

<blockquote>
  <p>Branching best practices:</p>

  <ul>
    <li><strong>Keep the name and work with branches dedicated to a specific and focused purpose.</strong> For example: a branch named <code class="language-plaintext highlighter-rouge">fix-links-in-docs</code> might entail work related to fixing HTTP links within documentation.</li>
    <li><strong>Consider the use of <a href="https://docs.github.com/en/get-started/quickstart/fork-a-repo">Github Forks</a></strong> (along with branches within the fork) to help further isolate and enrich work potential. Forks also allow remixing existing work into new possibilities.</li>
    <li><strong><a href="https://en.wikipedia.org/wiki/Festina_lente"><em>festina lente</em></a> or &#8220;make haste, slowly&#8221;:</strong> Commits on any branch represent small chunks of a cohesive idea which will eventually be brought to <code class="language-plaintext highlighter-rouge">main</code>. It is often beneficial to be consistent with small, gradual commits to avoid a rushed or incomplete submission. The same applies more generally for software; taking time upfront to do things well can mean time saved later.</li>
  </ul>
</blockquote>

<h2 id="reviewing-the-branched-work">Reviewing the Branched Work</h2>

<pre class="mermaid">
%%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {
      'git0': '#6366F1',
      'git1': '#10B981',
      'gitBranchLabel1': '#ffffff'
} } }%%
    gitGraph
       commit id: "..."
       commit id: "opened"
       branch assignment
       checkout assignment
       commit id: "completed"
       checkout main
       merge assignment id: "reviewed"
</pre>

<p class="center"><em>An example git diagram showing assignment branch being merged with main after a review.</em></p>

<p>The diagram above depicts a merge from the <code class="language-plaintext highlighter-rouge">assignment</code> branch to pull the changes into the <code class="language-plaintext highlighter-rouge">main</code> branch, simulating an assignment being returned for review within a course. While merges may be forced without review, it&#8217;s a best practice create a <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request">Pull Request (PR) Review</a> (also known as a <a href="https://docs.gitlab.com/ee/user/project/merge_requests/">Merge Request (MR)</a> on some systems) and then ask other members of your team to review it. Doing this provides a chance to make revisions before code changes are &#8220;finalized&#8221; within the <code class="language-plaintext highlighter-rouge">main</code> branch.</p>

<blockquote>
  <p>Github provides special tools for reviews which can assist both the author and reviewer:</p>

  <ul>
    <li><strong>Keep code changes intended for review small</strong>, enabling reviewers to reason through the work to more quickly provide feedback and practicing <a href="https://en.wikipedia.org/wiki/Continual_improvement_process">incremental continuous improvement</a> (it may be difficult to address everything at once!). This also may denote the git history for a repository in a clearer way.</li>
    <li><strong>Github comments:</strong> <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#about-pull-request-comments">Overall review comments</a> (encompassing all work from the branch) and <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request">Inline comments</a> (inquiring about individual lines of code) may be provided. Inline comments may also include code suggestions, which allows for code-based revision suggestions that may be committed directly to the branch using markdown codeblocks (<code class="language-plaintext highlighter-rouge"> </code>``suggestion `).</li>
    <li><strong>Github issues:</strong> <a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-comment">Creating issues from comments</a> allows the creation of new repository issues to address topics outside of the current PR.</li>
  </ul>
</blockquote>

<h2 id="merging-the-branch-after-review">Merging the Branch after Review</h2>

<pre class="mermaid">
%%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {
      'git0': '#6366F1'
} } }%%
    gitGraph
       commit id: "..."
       commit id: "opened"
       commit type: HIGHLIGHT id: "reviewed"
       commit id: "...."
</pre>

<p class="center"><em>An example git diagram showing the main branch after the assignment branch has been merged (and removed).</em></p>

<p>Changes may be made within the <code class="language-plaintext highlighter-rouge">assignment</code> branch until the work is in a state where the authors and reviewers are satisfied. At this point, the branch changes may be <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request">merged</a> into <code class="language-plaintext highlighter-rouge">main</code>. Approvals are sometimes provided informally (for ex., with a comment: &#8220;LGTM (looks good to me)!&#8221;) or explicitly (for ex., <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/approving-a-pull-request-with-required-reviews">approvals within Github</a>) to indicate or enable branch merge readiness . After the merge, changes may continue to be made in a similar way (perhaps accounting for concurrently branched work elsewhere). Generally, a merged branch may be removed afterwards to help maintain an organized working environment (see <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-branches-in-your-repository/deleting-and-restoring-branches-in-a-pull-request">Github PR branch removal</a>).</p>

<blockquote>
  <p>Github provides special tools for merging:</p>

  <ul>
    <li><strong>Decide which merge strategy is appropriate (there are many!):</strong> There are many <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github">merge strategies within Github</a> (merge commits, squash merges, and rebase merging). Take time to understand them and choose which one works best.</li>
    <li><strong>Consider using branch protection to automate merge requirements:</strong> The <code class="language-plaintext highlighter-rouge">main</code> or other branches may be &#8220;protected&#8221; against merges using <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches">branch protection rules</a>. These rules can require reviewer approvals or automatic status checks to pass before changes may be merged.</li>
    <li><strong>Use merge queuing to manage multiple PR&#8217;s:</strong> When there are many unmerged PR&#8217;s, it can sometimes be difficult to document and ensure each are merged in a desired sequence. Consider using <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue">merge queues</a> to help with this process.</li>
  </ul>
</blockquote>

<h2 id="additional-resources">Additional Resources</h2>

<p>The links below may provide additional guidance on using these git features, including in-depth coverage of various features and related configuration.</p>

<ul>
  <li><a href="https://swcarpentry.github.io/git-novice/">Software Carpentry: Version Control with Git</a></li>
  <li><a href="https://github.com/git-guides">Github: Git Guide</a></li>
  <li><a href="https://www.atlassian.com/git/tutorials/what-is-version-control">Atlassian: What is version control?</a></li>
  <li><a href="https://docs.gitlab.com/ee/topics/git/">Git Lab: Git</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="git" /><category term="branching" /><category term="pull-requests" /><category term="merging" /><summary type="html"><![CDATA[Tip of the Week: Branch, Review, and Learn]]></summary></entry><entry><title type="html">Tip of the Week: Software Linting with R</title><link href="/set-website/preview/pr-20/2023/01/30/Software-Linting-with-R.html" rel="alternate" type="text/html" title="Tip of the Week: Software Linting with R" /><published>2023-01-30T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2023/01/30/Software-Linting-with-R</id><content type="html" xml:base="/set-website/preview/pr-20/2023/01/30/Software-Linting-with-R.html"><![CDATA[<h1 id="tip-of-the-week-software-linting-with-r">Tip of the Week: Software Linting with R</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p>This article covers using the software technique of linting on R code in order to improve code quality, development velocity, and collaboration.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Use software linting (<a href="https://en.wikipedia.org/wiki/Static_program_analysis">static analysis</a>) practices on your R code with existing packages <a href="https://github.com/r-lib/lintr"><code class="language-plaintext highlighter-rouge">lintr</code></a> and <a href="https://github.com/r-lib/styler"><code class="language-plaintext highlighter-rouge">styler</code></a> (among others). These linters may be applied using <a href="https://pre-commit.com">pre-commit</a> in your local development environment or as <a href="https://en.wikipedia.org/wiki/Continuous_testing">continuous tests</a> using for example <a href="https://docs.github.com/en/actions">Github Actions</a>.</p>

<h2 id="treating-r-as-software">Treating R as Software</h2>

<blockquote>
  <p>&#8220;Many users think of R as a statistics system. We prefer to think of it as an environment within which statistical techniques are implemented.&#8221;</p>
</blockquote>

<p><em>(<a href="https://www.r-project.org/about.html">R-Project: What is R?</a>)</em></p>

<p>The <a href="https://en.wikipedia.org/wiki/R_(programming_language)">R programming language</a> is sometimes treated as <em>only</em> a statistics system instead of software. This treatment can sometimes lead to common issues in development which are experienced in other languages. Addressing R as software enables developers to enhance their work by taking benefit from existing concepts applied to many other languages.</p>

<h2 id="linting-with-r">Linting with R</h2>

<pre class="mermaid">
flowchart LR
  write\[Write R code] --&gt; |check| check\[Check code with linters]
  check --&gt; |revise| write
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p class="center"><em>Workflow loop depicting writing R code and revising with linters.</em></p>

<p>Software linting, or <a href="https://en.wikipedia.org/wiki/Static_program_analysis">static analysis</a>, is one way to ensure a minimum level of code quality without writing new tests. Linting checks how your code is structured without running it to make sure it abides by common language paradigms and logical structures. Using linting tools allows a developer to gain quick insights about their code before it is viewed or used by others.</p>

<p>One way to lint your R code is by using the <a href="https://github.com/r-lib/lintr"><code class="language-plaintext highlighter-rouge">lintr</code></a> package. The <code class="language-plaintext highlighter-rouge">lintr</code> package is also complementary of the <a href="https://github.com/r-lib/styler"><code class="language-plaintext highlighter-rouge">styler</code></a> pacakge, which formats the syntax of R code in a consistent way. Both of these can be used independently or as part of continuous quality checks for R code repositories.</p>

<h2 id="automated-linting-checks-with-r">Automated Linting Checks with R</h2>

<pre class="mermaid">
flowchart LR
  subgraph development
    write
    check
  end
  subgraph linters
    direction LR
    lintr
    styler
  end
  check &lt;-.- linters
  write\[Write R code] --&gt; |check| check\[Check code with pre-commit]
  check --&gt; |revise| write
</pre>

<p class="center"><em>Workflow showing development with pre-commit using multiple linters.</em></p>

<p><code class="language-plaintext highlighter-rouge">lintr</code> and <code class="language-plaintext highlighter-rouge">styler</code> can be incorporated into automated checks to help make sure linting (or other steps) are always used with new code. One tool which can help with this is <a href="https://pre-commit.com/">pre-commit</a>, which acts as both a local development tool in addition to providing observability within source control (more on this later).</p>

<p>Using pre-commit locally enables quick feedback loops using one or many checkers (such as <code class="language-plaintext highlighter-rouge">lintr</code>, <code class="language-plaintext highlighter-rouge">styler</code>, or others). Pre-commit may be used through the use of <a href="https://pre-commit.com/#usage">git hooks</a> or manually using <a href="https://pre-commit.com/#pre-commit-run"><code class="language-plaintext highlighter-rouge">pre-commit run ...</code></a> from a command-line. See <a href="https://github.com/lorenzwalthert/precommit">this example of pre-commit checks with R</a> for an example of multiple pre-commit checks for R code.</p>

<h2 id="continuous-and-observable-testing-for-r">Continuous and Observable Testing for R</h2>

<pre class="mermaid">
flowchart LR
  subgraph development [local development]
    direction LR
    write
    check
    commit
  end
  subgraph remote[Github repository]
    direction LR
    action["Check code (remotely)"]
  end
  write\[Write R code] --&gt; |check| check\[Check code with pre-commit]
  check --&gt; |revise| write
  check --&gt; commit[commit + push]
  commit --&gt; |optional trigger| action
  check -.-&gt; |perform same checks| action
</pre>

<p class="center"><em>Workflow showing pre-commit used as continuous testing tool with Github.</em></p>

<p>Pre-commit linting checks can also be incorporated into <a href="https://en.wikipedia.org/wiki/Continuous_testing">continuous testing</a> performed on your repository. One way to do this is using <a href="https://docs.github.com/en/actions">Github Actions</a>. Github Actions provides a programmatic way to specify automatic steps taken as changes occur to a repository.</p>

<p>Pre-commit provides <a href="https://github.com/pre-commit/action">an example Github Action</a> which will automatically check and alert repository maintainers when code challenges are detected. Using pre-commit in this way allows R developers to ensure <code class="language-plaintext highlighter-rouge">lintr</code> checks are performed on any new work checked into a repository. This can have benefits towards decreasing pull request (PR) review time and standardize how code collaboration takes place for R developers.</p>

<h2 id="resources">Resources</h2>

<p>Please see the following the resources on this topic.</p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/R_(programming_language)">R programming language</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Static_program_analysis">static analysis</a></li>
  <li><a href="https://github.com/r-lib/lintr">R package: lintr</a></li>
  <li><a href="https://github.com/r-lib/styler">R package: styler</a></li>
  <li><a href="https://pre-commit.com/">pre-commit</a></li>
  <li><a href="https://github.com/lorenzwalthert/precommit">Example of pre-commit checks with R</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Continuous_testing">continuous testing</a></li>
  <li><a href="https://docs.github.com/en/actions">Github Actions</a></li>
  <li><a href="https://github.com/pre-commit/action">an example Github Action</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="r" /><category term="static-analysis" /><category term="linting" /><category term="continuous-testing" /><summary type="html"><![CDATA[Tip of the Week: Software Linting with R]]></summary></entry><entry><title type="html">Tip of the Week: Timebox Your Software Work</title><link href="/set-website/preview/pr-20/2023/01/17/Timebox-Your-Software-Work.html" rel="alternate" type="text/html" title="Tip of the Week: Timebox Your Software Work" /><published>2023-01-17T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2023/01/17/Timebox-Your-Software-Work</id><content type="html" xml:base="/set-website/preview/pr-20/2023/01/17/Timebox-Your-Software-Work.html"><![CDATA[<h1 id="tip-of-the-week-timebox-your-software-work">Tip of the Week: Timebox Your Software Work</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. Views expressed in the content belong to the content creators and not the organization, its affiliates, or employees. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p>Programming often involves long periods of problem solving which can sometimes lead to unproductive or exhausting outcomes. This article covers one way to avoid less productive time expense or protect yourself from overexhaustion through a technique called &#8220;timeboxing&#8221; (also sometimes referenced as &#8220;timeblocking&#8221;).</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Use timeboxing techniques such as <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro®</a> or <a href="https://en.wikipedia.org/wiki/52/17_rule">52/17</a> to help <a href="https://en.wikipedia.org/wiki/Modularity">modularize</a> your software work to ensure you don&#8217;t fall victim to <a href="https://en.wikipedia.org/wiki/Parkinson%27s_law">Parkinson&#8217;s Law</a>. Timeboxing may also map well to <a href="https://github.com/features/issues">Github Issues</a>, which allows your software tasks to be further aligned, documented, and chunked in collaboration with others.</p>

<h2 id="controlling-work-time-expansion">Controlling Work Time Expansion</h2>

<figure class="figure">
  <a class="figure-image" aria-label="Image depicting work as a creature with a timebox around it.">
    <img src="/set-website/preview/pr-20/images/work_timebox.png" style="
        width: auto;
        max-height: unset;
      " alt="Image depicting work as a creature with a timebox around it." loading="lazy" onerror="this.src = '/set-website/preview/pr-20/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Image depicting work as a creature with a timebox around it.

    </figcaption>
  
</figure>

<p class="center">Have you ever spent more time than you thought you would on a task? An adage which helps explain this phenomenon is <a href="https://www.economist.com/news/1955/11/19/parkinsons-law">Parkinson&#8217;s Law</a>:</p>

<blockquote>
  <p>&#8220;&#8230; work expands so as to fill the time available for its completion.&#8221;</p>
</blockquote>

<p>The practice of writing software is not protected from this &#8220;law&#8221;. It may be affected by it in sometimes worse ways during long periods of uninterrupted programming where we may have an inclination to forget productive goals.</p>

<p>One way to address this is through the use of <a href="https://en.wikipedia.org/wiki/Timeboxing">timeboxing</a> techiques. Timeboxing sets a fixed limit to the amount of time one may spend on a specific activity. One can use timeboxing to systematically address many tasks, for example, as with the <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro® Technique</a> (developed by Francesco Cirillo) or <a href="https://en.wikipedia.org/wiki/52/17_rule">52/17 rule</a>. While there are many ways to apply timeboxing, make sure to balance activity with short breaks and focus switches to help ensure we don&#8217;t become overwhelmed.</p>

<h2 id="timeboxing-means-modularization">Timeboxing Means Modularization</h2>

<p>Timeboxing has an auxiliary benefit of framing your work as objective and oftentimes smaller chunks (we have to know what we&#8217;re timeboxing in order to use this technique). Creating distinct chunks of work applies for both our daily time schedule as well as code itself. This concept is more broadly called &#8220;<a href="https://en.wikipedia.org/wiki/Modularity">modularization</a>&#8221; and helps to distinguish large portions of work (whether in real life or in code) as smaller and more maintainable chunks.</p>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Goals</span>
<span class="p">-</span> Finish writing paper<span class="sb">




</span></code></pre></div></div>

<p><em>Vague and possibly large task</em></p>

</div>
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Goals</span>
<span class="p">-</span> Finish writing paper
<span class="p">  -</span> Create paper outline
<span class="p">  -</span> Finish writing introduction
<span class="p">  -</span> Check for dead hyperlinks
<span class="p">  -</span> Request internal review
</code></pre></div></div>

<p><em>Modular and more understandable tasks</em></p>
</div>
  
</div>

<p>Breaking down large amounts of work as smaller chunks within our code helps to ensure long-term maintainability and understandability. Similarly, keeping our tasks small can help ensure our goals are achievable and understandable (to ourselves or others). Without this modularity, tasks can be impossible to achieve (subjective in nature) or very difficult to understand. Stated differently, taking many small steps can lead to a big change in an organized, oftentimes less exhausting way (<a href="https://www.fosslien.com/liz-fosslien-the-power-of-small-steps">related graphic</a>).</p>

<h2 id="version-control-and-timeboxing">Version Control and Timeboxing</h2>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Repo Issues</span>
<span class="p">-</span> "Prevent foo warning" - 20 minutes
<span class="p">-</span> "Remove bar feature" - 20 minutes
<span class="p">-</span> "Address baz error" - 20 minutes

</code></pre></div></div>

<p class="center"><em>List of example version control repository issues with associated time duration.</em></p>

<p>The parallels between the time we give a task and related code can work towards your benefit. For example, <a href="https://github.com/features/issues">Github Issues</a> can be created to outline a timeboxed task which relates to a distinct chunk of code to be created, updated, or fixed. Once development tasks have been outlined as issues, a developer can use timeboxing to help organize how much time to allocate on each issue.</p>

<p>Using Github Issues in this way provides a way to observe task progress associated with one or many repositories. It also increases collaborative opportunities for task sizing and description. For example, if a task looks too large to complete in a reasonable amount of time, developers may work together to break the task down into smaller modules of work.</p>

<h2 id="be-kind-to-yourself-take-breaks">Be Kind to Yourself: Take Breaks</h2>

<p>While timeboxing is often a conversation about how to be more productive, it&#8217;s also worth remembering: <strong>take breaks to be kind to yourself and more effective</strong>. Some studies and thought leadership have shown that taking breaks may be necessary to avoid performance decreases and impacts to your health. There&#8217;s also some indication that taking breaks may lead to better work. See below for just a few examples:</p>

<ul>
  <li><a href="https://thewellbeingthesis.org.uk/foundations-for-success/importance-of-taking-breaks-and-having-other-interests/">The Importance of Taking Breaks</a></li>
  <li><a href="https://www.sciencedirect.com/science/article/pii/S0010027710002994?via%3Dihub">Brief and rare mental “breaks” keep you focused: Deactivation and reactivation of task goals preempt vigilance decrements</a></li>
  <li><a href="https://pubmed.ncbi.nlm.nih.gov/24749966/">Give your ideas some legs: the positive effect of walking on creative thinking</a></li>
</ul>

<h2 id="additional-resources">Additional Resources</h2>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Parkinson%27s_law">Parkinson&#8217;s Law</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Timeboxing">Timeboxing</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Timeblocking">Timeblocking</a> Additional similar notes on time management.</li>
  <li><a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro® Technique</a></li>
  <li><a href="https://en.wikipedia.org/wiki/52/17_rule">52/17 Rule</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Modularity">Modularity</a></li>
  <li><a href="https://github.com/features/issues">Github Issues</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="timeboxing" /><category term="timeblocking" /><category term="productivity" /><category term="modularization" /><category term="projectmanagement" /><summary type="html"><![CDATA[Tip of the Week: Timebox Your Software Work]]></summary></entry><entry><title type="html">Tip of the Week: Linting Documentation as Code</title><link href="/set-website/preview/pr-20/2023/01/03/Linting-Documentation-as-Code.html" rel="alternate" type="text/html" title="Tip of the Week: Linting Documentation as Code" /><published>2023-01-03T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2023/01/03/Linting-Documentation-as-Code</id><content type="html" xml:base="/set-website/preview/pr-20/2023/01/03/Linting-Documentation-as-Code.html"><![CDATA[<h1 id="tip-of-the-week-linting-documentation-as-code">Tip of the Week: Linting Documentation as Code</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p><a href="https://en.wikipedia.org/wiki/Software_documentation">Software documentation</a> is sometimes treated as a less important or secondary aspect of software development. Treating documentation as code allows developers to version control the shared understanding and knowledge surrounding a project. Leveraging this paradigm also enables the use of tools and patterns which have been used to strengthen code maintenance. This article covers one such pattern: <a href="https://en.wikipedia.org/wiki/Lint_(software)">linting</a>, or static analysis, for documentation treated like code.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
There are many linting tools available which enable quick revision of your documentation. Try using <a href="https://github.com/codespell-project/codespell">codespell</a> for spelling corrections, <a href="https://github.com/executablebooks/mdformat">mdformat</a> for markdown file formatting corrections, and <a href="https://vale.sh/">vale</a> for more complex editorial style or natural language assessment within your documentation.</p>

<h2 id="spelling-checks">Spelling Checks</h2>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--- readme.md ---&gt;</span>
<span class="gu">## Example Readme</span>

Thsi project is a wokr in progess.
Code will be updated by the team very often.

(CU Anschutz)[https://www.cuanschutz.edu/]
</code></pre></div></div>

<p><em>Example readme.md with incorrectly spelled words</em></p>
</div>
  
    
    <div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">% codespell readme.md
</span><span class="gp">readme.md:4: Thsi ==&gt;</span><span class="w"> </span>This
<span class="gp">readme.md:4: wokr ==&gt;</span><span class="w"> </span>work
<span class="gp">readme.md:4: progess ==&gt;</span><span class="w"> </span>progress
<span class="go">


</span></code></pre></div></div>

<p><em>Example showing codespell detection of mispelled words</em></p>
</div>
  
</div>

<p><a href="https://en.wikipedia.org/wiki/Spell_checker">Spelling checks</a> may be used to automatically detect incorrect spellings of words within your documentation (and code!). <a href="https://github.com/codespell-project/codespell">Codespell</a> is one library which can lint your word spelling. Codespell may be used through the command-line and also through a <a href="https://pre-commit.com/index.html">pre-commit</a> hook.</p>

<h2 id="markdown-format-linting">Markdown Format Linting</h2>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--- readme.md ---&gt;</span>
<span class="gu">## Example Readme</span>

This project is a work in progress.
Code will be updated by the team very often.

(CU Anschutz)[https://www.cuanschutz.edu/]
</code></pre></div></div>

<p><em>Example readme.md with markdown issues</em></p>
</div>
  
    
    <div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">% markdownlint readme.md
readme.md:2 MD041/first-line-heading/first-line-h1
First line in a file should be a top-level heading
</span><span class="gp">[Context: "#</span><span class="c"># Example Readme"]</span>
<span class="go">readme.md:6:5 MD011/no-reversed-links Reversed link
syntax [(link)[https://www.cuanschutz.edu/]]

</span></code></pre></div></div>

<p><em>Example showing markdownlint detection of issues</em></p>
</div>
  
</div>

<p>The format of your documentation files may also be linted for common issues. This may catch things which are otherwise hard to see when editing content. It may also improve the overall <a href="https://en.wikipedia.org/wiki/Web_accessibility">web accessibility</a> of your content, for example, through proper HTML header order and image alternate text. <a href="https://github.com/markdownlint/markdownlint">Markdownlint</a> is one library which can be used to find issues within markdown files.</p>

<p>Additional and similar resources to explore in this area:</p>

<ul>
  <li><a href="https://github.com/twolfson/restructuredtext-lint">restructuredtext-lint</a> - for linting RST files</li>
  <li><a href="https://github.com/executablebooks/mdformat">mdformat</a> - an additional markdown linter</li>
</ul>

<h2 id="editorial-style-and-grammar">Editorial Style and Grammar</h2>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--- readme.md ---&gt;</span>
<span class="gh"># Example Readme</span>

This project is a work in progress.
Code will be updated by the team very often.

<span class="p">[</span><span class="nv">CU Anschutz</span><span class="p">](</span><span class="sx">https://www.cuanschutz.edu/</span><span class="p">)</span>
</code></pre></div></div>

<p><em>Example readme.md with questionable editorial style</em></p>
</div>
  
    
    <div>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">% vale readme-example.md
readme-example.md
2:12  error    Did you really mean 'Readme'?   Vale.Spelling
5:11  warning  'be updated' may be passive     write-good.Passive
               voice. Use active voice if you
               can.
5:34  warning  'very' is a weasel word!        write-good.Weasel
</span></code></pre></div></div>

<p><em>Example showing vale warnings and errors</em></p>
</div>
  
</div>

<p>Maintaining consistent editorial style and grammar may also be a focus within your documentation. These issues are sometimes more difficult to detect and more opinionated in nature. In some cases, organizations publish guides on this topic (see <a href="https://learn.microsoft.com/en-us/style-guide/welcome/">Microsoft Writing Style Guide</a>, or <a href="https://developers.google.com/style">Google Developer Documenation Style Guide</a>). Some of the complexity of writing style may be linted through tools like <a href="https://vale.sh/">Vale</a>. Using common configurations through Vale can unify how language is used within your documentation by linting for common style and grammar.</p>

<p>Additional and similar resources to explore in this area:</p>

<ul>
  <li><a href="https://textlint.github.io/">textlint</a> - similar to Vale with a modular approach</li>
</ul>

<h2 id="resources">Resources</h2>

<p>Please see the following the resources on this topic.</p>

<ul>
  <li><a href="https://github.com/codespell-project/codespell">codespell</a> - a code and documentation spell checker.</li>
  <li><a href="https://github.com/markdownlint/markdownlint">markdownlint</a> - markdown linter.</li>
  <li><a href="https://github.com/executablebooks/mdformat">mdformat</a> - another markdown linter.</li>
  <li><a href="https://github.com/twolfson/restructuredtext-lint">restructuredtext-lint</a> - RST file format linter.</li>
  <li><a href="https://vale.sh/">vale</a> - an editorial style linter.</li>
  <li><a href="https://textlint.github.io/">textlint</a> - another editorial style linter with greater modularity.</li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="documentation" /><category term="docsascode" /><category term="linting" /><category term="staticanalysis" /><summary type="html"><![CDATA[Tip of the Week: Linting Documentation as Code]]></summary></entry><entry><title type="html">Tip of the Week: Remove Unused Code to Avoid Software Decay</title><link href="/set-website/preview/pr-20/2022/12/12/Remove-Unused-Code-to-Avoid-Decay.html" rel="alternate" type="text/html" title="Tip of the Week: Remove Unused Code to Avoid Software Decay" /><published>2022-12-12T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2022/12/12/Remove-Unused-Code-to-Avoid-Decay</id><content type="html" xml:base="/set-website/preview/pr-20/2022/12/12/Remove-Unused-Code-to-Avoid-Decay.html"><![CDATA[<h1 id="tip-of-the-week-remove-unused-code-to-avoid-software-decay">Tip of the Week: Remove Unused Code to Avoid Software Decay</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p>The act of creating software often involves many iterations of writing, personal collaborations, and testing. During this process it&#8217;s common to lose awareness of code which is no longer used, and thus may not be tested or otherwise linted. Unused code may contribute to <a href="https://en.wikipedia.org/wiki/Software_rot">&#8220;software decay&#8221;</a>, the gradual diminishment of code quality or functionality. This post will cover software decay and strategies for addressing unused code to help keep your code quality high.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Unused code is easy to amass and may cause your code quality or code functionality to diminish (&#8220;decay&#8221;) over time. Effort must be taken to maintain any code or artifacts you add to your repositories, including those which are unused. Consider using <a href="https://github.com/jendrikseipp/vulture">Vulture</a>, <a href="https://pylint.pycqa.org/">Pylint</a>, or <a href="https://coverage.readthedocs.io/">Coverage</a> to help illuminate sections of your code which may need to be removed.</p>

<h2 id="code-lifecycle-and-maintenance">Code Lifecycle and Maintenance</h2>

<pre class="mermaid">
stateDiagram
    direction LR
    removal : removed or archived
    changes : changes needed
    [*] --&gt; added
    added --&gt; maintenance
    state maintenance {
      direction LR
      updated --&gt; changes
      changes --&gt; updated
    }
    maintenance --&gt; removal
    removal --&gt; [*]
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p><em>Diagram showing code lifecycle activities.</em></p>

<p>Adding code to a project involves a loose agreement to maintenance for however long the code is available. The maintenance of the code can involve added efforts in changes as well as passive impacts like longer test durations or decreased readability (simply from more code).</p>

<div id="vis" class="center"></div>

<script src="https://cdn.jsdelivr.net/npm/vega@5.22.1"></script>

<script src="https://cdn.jsdelivr.net/npm/vega-lite@5.6.0"></script>

<script src="https://cdn.jsdelivr.net/npm/vega-embed@6.21.0"></script>

<script>
var spec = {
    "$schema": "https://vega.github.io/schema/vega-lite/v5.5.0.json",
    "description": "A simple line chart to demonstrate lines of code and associated theoretical time cost.",
    "title":"Time Cost per Line of Code",
    "width": 500,
    "height": 200,
    "config": {
      "title":{"fontSize":14},
      "axisY":{"titleFontSize":14, "labelFontSize":12},
      "axisX":{"titleFontSize":14, "labelFontSize":12}
    },
    "data": {
      "values": [
        {"x": 1, "y": 28},
        {"x": 1000, "y": 500}
      ]
    },
    "mark": {"type": "line", "point": {"filled": false,
      "fill": "white", "size":50
    }},
    "encoding": {
      "x": {"title": "Lines of Code", "field": "x", "type": "quantitative", "scale": {"domain": [1, 1000]}
      },
      "y": {"title": "Time (minutes)", "field": "y", "type": "quantitative", "scale": {"domain": [1, 500]}}
    }
  }
const embed_opt = {"mode": "vega-lite"};
const el = document.getElementById('vis');
const view = vegaEmbed("#vis", spec, embed_opt);
</script>

<p>When considering multiple parts of code in many files, this maintenance can become untenable, leading to the gradual decay of your code quality or functionality. For example, let&#8217;s assume one line of code costs 30 seconds to maintain (feel free to substitute time with monetary or personnel aspects as an example measure here too). 1000 lines of code would cost 500 minutes (or about 8 hours) to maintain. This becomes more complex when considering multiple files, collaborators, or languages.</p>

<p class="center"><i class="fas fa-hiking" style="font-size:4em;"></i></p>

<p>Think about your project as if it were on a hiking trail: <strong>&#8220;Carry as little as possible, but choose that little with care.&#8221;</strong> (Earl Shaffer). Be careful what code you choose to carry; it may impact your ability to address needs over time and lead to otherwise unintended software decay.</p>

<h2 id="detecting-unused-code-with-vulture">Detecting Unused Code with Vulture</h2>

<p>Understanding the cost of added content, it&#8217;s important to routinely examine which parts of your code are still necessary. You can prepare your code for a long journey by detecting (and removing) unused code with various automated tools. These tools are generally designed for static analysis and linting, meaning they may also be incorporated into automated and routine testing.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>vulture unused_code_example.py
unused_code_example.py:3: unused import <span class="s1">'os'</span> <span class="o">(</span>90% confidence<span class="o">)</span>
unused_code_example.py:4: unused import <span class="s1">'pd'</span> <span class="o">(</span>90% confidence<span class="o">)</span>
unused_code_example.py:7: unused <span class="k">function</span> <span class="s1">'unused_function'</span> <span class="o">(</span>60% confidence<span class="o">)</span>
unused_code_example.py:14: unused variable <span class="s1">'unused_var'</span> <span class="o">(</span>60% confidence<span class="o">)</span>
</code></pre></div></div>

<p><em>Example of Vulture command line usage to discover unused code.</em></p>

<p><a href="https://github.com/jendrikseipp/vulture">Vulture</a> is one tool dedicated to finding unused python code. Vulture provides both a command line interface and Python API for discovering unused code. It also provide a rough confidence to show how certain it was about whether the block of code was unused. See the following interactive example for a demonstration of using Vulture.</p>

<p><a href="https://cu-dbmi.github.io/notebooks/lab?path=unused_code_detection.ipynb">Interactive Example on Unused Code Detection</a></p>

<h2 id="further-code-usefulness-detection-with-pylint-and-coveragepy">Further Code Usefulness Detection with Pylint and Coverage.py</h2>

<p>In addition to Vulture, <a href="https://pylint.pycqa.org/en/latest/index.html">Pylint</a> and <a href="https://coverage.readthedocs.io/">Coverage.py</a> can be used in a similar way to help show where code may not have been used within your project.</p>

<p><a href="https://pylint.pycqa.org/en/latest/index.html">Pylint</a> focuses on code style and other static analysis in addition to unused variables. See <a href="https://pylint.pycqa.org/en/latest/user_guide/checkers/features.html">Pylint&#8217;s Checkers</a> page for more details here, using &#8220;unused-*&#8221; as a reference to checks it performs which focus on unused code.</p>

<p><a href="https://coverage.readthedocs.io/">Coverage.py</a> helps show you which parts of your code have been executed or not. A common usecase for Coverage involves measuring &#8220;test coverage&#8221;, or which parts of your code are executed in relationship to tests written for that code. This provides another perspective on code utility: if there&#8217;s not a test for the code, is it worth keeping?</p>

<h2 id="additional-resources">Additional Resources</h2>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Software_rot">Software Rot</a></li>
  <li><a href="https://github.com/jendrikseipp/vulture">Vulture</a></li>
  <li><a href="https://pylint.pycqa.org/en/latest/index.html">Pylint</a></li>
  <li><a href="https://coverage.readthedocs.io/">Coverage</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="code-quality" /><category term="software-decay" /><category term="code-decay" /><category term="vulture" /><category term="pylint" /><category term="coverage.py" /><summary type="html"><![CDATA[Tip of the Week: Remove Unused Code to Avoid Software Decay]]></summary></entry><entry><title type="html">Tip of the Week: Data Engineering with SQL, Arrow and DuckDB</title><link href="/set-website/preview/pr-20/2022/12/05/Data-Engineering-with-SQL-Arrow-and-DuckDB.html" rel="alternate" type="text/html" title="Tip of the Week: Data Engineering with SQL, Arrow and DuckDB" /><published>2022-12-05T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2022/12/05/Data-Engineering-with-SQL-Arrow-and-DuckDB</id><content type="html" xml:base="/set-website/preview/pr-20/2022/12/05/Data-Engineering-with-SQL-Arrow-and-DuckDB.html"><![CDATA[<h1 id="tip-of-the-week-data-engineering-with-sql-arrow-and-duckdb">Tip of the Week: Data Engineering with SQL, Arrow and DuckDB</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p><a href="https://arrow.apache.org/">Apache Arrow</a> is a language-independent and high performance data format useful in many scenarios. <a href="https://duckdb.org/">DuckDB</a> is an in-process <a href="https://en.wikipedia.org/wiki/SQL">SQL</a>-based data management system which is Arrow-compatible. In addition to providing a <a href="https://sqlite.org/index.html">SQLite</a>-like database format, DuckDB also provides a standardized and high performance way to work with Arrow data where otherwise one may be forced to language-specific data structures or transforms.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
DuckDB may be used to access and transform Arrow-based data from multiple data formats through SQL. Using Arrow and DuckDB provides a cross-language way to access and manage data. Data development with these tools may also enable improvements in performance, understandability, or long term maintainability of your code.</p>

<h2 id="reduce-wasted-conversion-effort-with-arrow">Reduce Wasted Conversion Effort with Arrow</h2>

<pre class="mermaid">
flowchart TB
    Python:::outlined &lt;--&gt; Arrow
    R:::outlined &lt;--&gt; Arrow
    C++:::outlined &lt;--&gt; Arrow
    Java:::outlined &lt;--&gt; Arrow
    others...:::outlined &lt;--&gt; Arrow

    classDef outlined fill:#fff,stroke:#333
</pre>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script>

<p>Arrow provides a <a href="https://arrow.apache.org/docs/">multi-language</a> data format which prevents you from needing to convert to other formats when dealing with multiple in-memory or serialized data formats. For example, this means that a Python and an R package may use the same in-memory or file-based data without conversion (where normally a Python Pandas dataframe and R data frame may require a conversion step in between).</p>

<pre class="mermaid">
flowchart TB
    subgraph Python
      Pandas:::outlined
      Polars:::outlined
      dict[Python dict]:::outlined
      list[Python list]:::outlined
    end

    Pandas &lt;--&gt; Arrow
    Polars &lt;--&gt; Arrow
    dict &lt;--&gt; Arrow
    list &lt;--&gt; Arrow

  classDef outlined fill:#fff,stroke:#333
</pre>

<p>The same stands for various libraries within one language - Arrow enables interchange between various language library formats (for example, a Python Pandas dataframe and Python dictionary are two distinct in-memory formats which may require conversions). Conversions to or from these formats can involve data type or other inferences which are costly to productivity. You can save time and effort by avoiding conversions using Arrow.</p>

<h2 id="using-sql-to-join-or-transform-arrow-data-via-duckdb">Using SQL to Join or Transform Arrow Data via DuckDB</h2>

<pre class="mermaid">
flowchart LR
    subgraph duckdb["DuckDB Processing"]
        direction BT
        SQL[SQL] --&gt; DuckDB[DuckDB Client]
    end
    parquet1[example.parquet] --&gt; duckdb
    sqlite[example.sqlite] --&gt; duckdb
    csv[example.csv] --&gt; duckdb
    arrow["in-memory Arrow"] --&gt; duckdb
    pandas["in-memory Pandas"] --&gt; duckdb
    duckdb --&gt; Arrow
    Arrow --&gt; Other[Other work...]
</pre>

<p>DuckDB provides a management client and relational database format (similar to SQLite databases) which may be handled with Arrow. SQL may be used with the DuckDB client to filter, join, or change various data types. Due to Arrow&#8217;s cross-language properties, there is no additional cost to using SQL through DuckDB to return data for implementation within other purpose-built data formats. <a href="https://duckdb.org/docs/api/overview">DuckDB provides client API&#8217;s in many languages</a> (for example, Python, R, and C++), making it possible to write DuckDB client code with SQL to manage data without having to use manually written sub-procedures.</p>

<pre class="mermaid">
flowchart TB
  subgraph duckdb["DuckDB Processing"]
        direction BT
        SQL[SQL] --&gt; DuckDB[DuckDB Client]
    end
    Python:::outlined &lt;--&gt; duckdb
    R:::outlined &lt;--&gt; duckdb
    C++:::outlined &lt;--&gt; duckdb
    Java:::outlined &lt;--&gt; duckdb
    others...:::outlined &lt;--&gt; duckdb
    duckdb &lt;--&gt; Arrow

    classDef outlined fill:#fff,stroke:#333
</pre>

<p>Using SQL to perform these operations with Arrow provides an opportunity for your data code to be used (or understood) within other languages without additional rewrites. SQL also provides you access to roughly 48 years worth of data management improvements without being constrained by imperative language data models or schema (reference: <a href="https://en.wikipedia.org/wiki/SQL">SQL Wikipedia: <em>First appeared: 1974</em></a>).</p>

<h2 id="example-with-sql-to-join-arrow-data-with-duckdb-in-python">Example with SQL to Join Arrow Data with DuckDB in Python</h2>

<figure class="figure">
  <a class="figure-image" aria-label="Jupyter notebook example screenshot with DuckDB and Arrow data handling">
    <img src="/set-website/preview/pr-20/images/duckdb_arrow_query_example.png" style="
        width: 500px;
        max-height: unset;
      " alt="Jupyter notebook example screenshot with DuckDB and Arrow data handling" loading="lazy" onerror="this.src = '/set-website/preview/pr-20/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Jupyter notebook example screenshot with DuckDB and Arrow data handling

    </figcaption>
  
</figure>

<p>The following example notebook shows how to use SQL to join data from multiple sources using the DuckDB client API within Python. The example includes DuckDB querying a remote CSV, local Parquet file, and Arrow in-memory tables.</p>

<p><a href="https://github.com/CU-DBMI/notebooks/blob/main/content/arrow_and_duckdb_example.ipynb">Linked Example</a></p>

<h2 id="additional-resources">Additional Resources</h2>

<p>Please see the following the additional resources.</p>

<ul>
  <li><a href="https://arrow.apache.org/docs/index.html">Apache Arrow Documentation</a></li>
  <li><a href="https://duckdb.org/docs/">DuckDB Documentation</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="data" /><category term="sql" /><category term="dataframes" /><category term="arrow" /><category term="duckdb" /><summary type="html"><![CDATA[Tip of the Week: Data Engineering with SQL, Arrow and DuckDB]]></summary></entry><entry><title type="html">Tip of the Week: Diagrams as Code</title><link href="/set-website/preview/pr-20/2022/11/27/Diagrams-as-Code.html" rel="alternate" type="text/html" title="Tip of the Week: Diagrams as Code" /><published>2022-11-27T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2022/11/27/Diagrams-as-Code</id><content type="html" xml:base="/set-website/preview/pr-20/2022/11/27/Diagrams-as-Code.html"><![CDATA[<h1 id="tip-of-the-week-diagrams-as-code">Tip of the Week: Diagrams as Code</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p>Diagrams can be a useful way to illuminate and communicate ideas. Free-form drawing or drag and drop tools are one common way to create diagrams. With this tip of the week we introduce another option: diagrams as code (DaC), or creating diagrams by using code.</p>

<!-- excerpt end -->

<p><strong>TLDR (too long, didn&#8217;t read);</strong>
Diagrams as code (DaC) tools provide an advantage for illustrating concepts by enabling <strong>quick visual positioning</strong>, <strong>source controllable input</strong>, <strong>portability (both for input and output formats)</strong>, and <strong>open collaboration through reproducibility</strong>. Consider using <a href="https://mermaid-js.github.io/mermaid/">Mermaid</a> (as well as many other DaC tools) to assist your diagramming efforts which can be used directly, within in your markdown files, or <a href="https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams#creating-mermaid-diagrams">Github commentary</a> using code blocks (for example, ` ```mermaid `).</p>

<h2 id="example-mermaid-diagram-as-code">Example Mermaid Diagram as Code</h2>

<div class="cols" style="--cols: 2">
  
    
    <div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flowchart LR
    a --&gt; b
    b --&gt; c
    c --&gt; d1
    c --&gt; d2
</code></pre></div></div>

<p><em>Mermaid code</em></p>
</div>
  
    
    <div>
<pre class="mermaid">
flowchart LR
    a --&gt; b
    b --&gt; c
    c --&gt; d1
    c --&gt; d2
</pre>
<p><em>Mermaid rendered</em>
<script type="module">
  import mermaid from 'https://unpkg.com/mermaid@9/dist/mermaid.esm.min.mjs';
  mermaid.initialize({ startOnLoad: true });
</script></p>

</div>
  
</div>

<p>The above shows an example <a href="https://mermaid-js.github.io/mermaid/#/flowchart">mermaid flowchart</a> code and its rendered output. The syntax is specific to mermaid and acts as a simple coding language to help you depict ideas. Mermaid also includes options for sequence, class, Gantt, and other diagram types. Mermaid provides a <a href="https://mermaid.live/edit#pako:eNpVzD1PwzAQBuC_Et2cRv6KL_HABBtT2SovV9vQCBxXlqPSRvnvhFRI9KZ73vuYwSUfwMD7V7q4E-VSve7tWK1F1W73VB3vOG5wd7gNnj9IQA0x5EiDX9_NvzML5RRisGDW1lP-tGDHZd2jqaS36-jAlDyFGqazpxKeB_rIFB_DFz-UlP-yM42HlOI_gpnhGww2vMMee62kapliqoYrmJ41SjONrOVSSN21Sw237Z43DLVgXCNKIWSHuPwAvLtMeg">live editor</a> which can be used to quickly draft and share content.</p>

<h2 id="mermaid-github-integration">Mermaid Github Integration</h2>

<div class="cols" style="--cols: 2">
  
    
    <div>
<figure class="figure">
  <a class="figure-image" aria-label="Github comment">
    <img src="/set-website/preview/pr-20/images/github_mermaid_code.png" style="
        width: auto;
        max-height: unset;
      " alt="Github comment" loading="lazy" onerror="this.src = '/set-website/preview/pr-20/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Github comment

    </figcaption>
  
</figure>

</div>
  
    
    <div>
<figure class="figure">
  <a class="figure-image" aria-label="Github comment preview">
    <img src="/set-website/preview/pr-20/images/github_mermaid_preview.png" style="
        width: auto;
        max-height: unset;
      " alt="Github comment preview" loading="lazy" onerror="this.src = '/set-website/preview/pr-20/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Github comment preview

    </figcaption>
  
</figure>

</div>
  
</div>

<p>Mermaid diagrams may be rendered directly from markdown (<code class="language-plaintext highlighter-rouge">.md</code>) and text communication content (like pull request or issue comments) within Github. See <a href="https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/">Github&#8217;s blog post on mermaid</a> for more details covering this topic.</p>

<h2 id="mermaid-jupyter-notebook-integration">Mermaid Jupyter Notebook Integration</h2>

<figure class="figure">
  <a class="figure-image" aria-label="Mermaid content rendered in a Jupyter notebook">
    <img src="/set-website/preview/pr-20/images/jupyter_mermaid_example.png" style="
        width: 500px;
        max-height: unset;
      " alt="Mermaid content rendered in a Jupyter notebook" loading="lazy" onerror="this.src = '/set-website/preview/pr-20/images/fallback.svg'; this.onerror = null;" />
  </a>
  
    <figcaption class="figure-caption">
      Mermaid content rendered in a Jupyter notebook

    </figcaption>
  
</figure>

<p>Mermaid diagrams can be rendered directly within <a href="https://en.wikipedia.org/wiki/Project_Jupyter#Jupyter_Notebook_Documents">Jupyter notebooks</a> with a small amount of additional code and a rendering service. One way to render mermaid and other diagrams within notebooks is to use <a href="https://kroki.io/">Kroki.io</a>. See <a href="https://cu-dbmi.github.io/notebooks/lab?path=mermaid_example.ipynb">this example</a> for an interactive demonstration.</p>

<h2 id="version-controlling-your-diagrams">Version Controlling Your Diagrams</h2>

<pre class="mermaid">
graph LR
    subgraph Compose
      write[Write Diagram Code]
      render[Render Diagram]
    end
    subgraph Store[Save and Share]
      save[Upload Diagram]
    end
    write --&gt; | create | render
    render --&gt; | revise | write
    render --&gt; | code and exports | save
</pre>
<p><em>Mermaid version control workflow example</em></p>

<p>Creating your diagrams with code means you can enable reproducible and collaborative work on version control systems (like git). Using git in this way allows you to reference and remix your diagrams as part of development. It also allows others to collaborate on diagrams together making modifications as needed.</p>

<h2 id="additional-resources">Additional Resources</h2>

<p>Please see the following the additional resources which are related to diagrams as code.</p>

<ul>
  <li><a href="https://plantuml.com/">PlantUML</a></li>
  <li><a href="https://vega.github.io/vega/">Vega</a></li>
  <li><a href="https://kroki.io/">Kroki.io</a></li>
</ul>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="software" /><category term="diagrams" /><category term="mermaid" /><category term="markdown" /><summary type="html"><![CDATA[Tip of the Week: Diagrams as Code]]></summary></entry><entry><title type="html">Tip of the Week: Use Linting Tools to Save Time</title><link href="/set-website/preview/pr-20/2022/10/17/Use-Linting-Tools-to-Save-Time.html" rel="alternate" type="text/html" title="Tip of the Week: Use Linting Tools to Save Time" /><published>2022-10-17T00:00:00+00:00</published><updated>2023-06-09T18:15:47+00:00</updated><id>/set-website/preview/pr-20/2022/10/17/Use-Linting-Tools-to-Save-Time</id><content type="html" xml:base="/set-website/preview/pr-20/2022/10/17/Use-Linting-Tools-to-Save-Time.html"><![CDATA[<h1 id="tip-of-the-week-use-linting-tools-to-save-time">Tip of the Week: Use Linting Tools to Save Time</h1>

<blockquote>
  <p>Each week we seek to provide a software tip of the week geared towards helping you achieve your software goals. If you have any software questions or suggestions for an upcoming tip of the week, please don’t hesitate to reach out to #software-engineering on Slack or email DBMISoftwareEngineering at olucdenver.onmicrosoft.com</p>
</blockquote>

<!-- excerpt start -->

<p>Have you ever found yourself spending hours formatting your code so it looks just right? Have you ever caught a duplicative import statement in your code? We recommend using open source <strong>linting</strong> tools to help avoid common issues like these and save time.</p>

<!-- excerpt end -->

<p><a href="https://en.wikipedia.org/wiki/Lint_(software)"><strong>Software Linting</strong></a> is the practice of detecting and sometimes automatically fixing stylistic, syntactical, or other programmatic issues. Linting usually involves installing standardized or opinionated libraries which allow you to quickly make code corrections. Using linting tools also can help you learn nuanced or unwritten intricacies of programming languages while you solve problems in your work.</p>

<p><strong>TLDR (too long, didn&#8217;t read);</strong> Linting is a type of static analysis which can be used to instantly address many common code issues. <a href="https://pycqa.github.io/isort/index.html"><code class="language-plaintext highlighter-rouge">isort</code></a> provides automatic Python import statement linting. <a href="https://pre-commit.com/"><code class="language-plaintext highlighter-rouge">pre-commit</code></a> provides an easy way to test and apply isort (in addition to other linting tools) through source control workflows.</p>

<h2 id="example-python-code-style-linting-with-isort">Example: Python Code Style Linting with isort</h2>

<p><a href="https://pycqa.github.io/isort/index.html"><strong>Isort</strong></a> is a Python utility for linting package import statements (sorting, deduplication, etc). Isort may be used to automatically fix your import statements or test for their consistency. See the <a href="https://pycqa.github.io/isort/docs/quick_start/1.-install.html">isort installation documentation</a> for more information on getting started.</p>

<p><strong>Before isort</strong></p>

<p>The following Python code shows a series of import statements. There are duplicate imports and the imports are a mixture of custom (possibly local), external, and built-in packages. Isort can check this code using the command: <code class="language-plaintext highlighter-rouge">isort &lt;file or path&gt; --check</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">custompkg</span> <span class="kn">import</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">os</span>
</code></pre></div></div>

<p><strong>After isort</strong></p>

<p>Isort can fix the code automatically using the command: <code class="language-plaintext highlighter-rouge">isort &lt;file or path&gt;</code>. After applying the fixes, notice that all packages are alphabetized and grouped by built-in, external, and custom packages.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">custompkg</span> <span class="kn">import</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span>
</code></pre></div></div>

<h2 id="using-isort-with-pre-commit">Using isort with pre-commit</h2>

<p><a href="https://pre-commit.com/"><strong>Pre-commit</strong></a> is a framework which can be used to apply linting checks and fixes as <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git-hooks</a> or the command line. Pre-commit includes existing hooks for many libraries, including isort. See the <a href="https://pre-commit.com/#install">pre-commit installation documentation</a> to get started.</p>

<p><strong>Example .pre-commit-config.yaml Configuration</strong></p>

<p>The following yaml content can be used to reference isort by pre-commit. This configuration content can be expanded to many different pre-commit hooks.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># example .pre-commit-config.yaml file leveraging isort</span>
<span class="c1"># See https://pre-commit.com/hooks.html for more hooks</span>
<span class="nn">---</span>
<span class="na">repos</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">repo</span><span class="pi">:</span> <span class="s">https://github.com/PyCQA/isort</span>
    <span class="na">rev</span><span class="pi">:</span> <span class="s">5.10.1</span>
    <span class="na">hooks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">isort</span>
</code></pre></div></div>

<p><strong>Example Using pre-commit Manually</strong></p>

<p>Imagine we have a file, example.py, which includes the content from <em>Before isort</em>. Running pre-commit manually on the directory files will first automatically apply isort formatting. The second time pre-commit is run there will be no issue (pre-commit resolved it automatically).</p>

<p>First detecting and fixing the file:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">% pre-commit run --all-files
isort...................................Failed
- hook id: isort
- files were modified by this hook

Fixing example.py
</span></code></pre></div></div>

<p>Then checking that the file was fixed:</p>

<div class="language-console left highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">% pre-commit run --all-files
isort...................................Passed
</span></code></pre></div></div>]]></content><author><name>dave-bunten</name></author><category term="tip-of-the-week" /><category term="linting" /><category term="static-analysis" /><category term="software" /><summary type="html"><![CDATA[Tip of the Week: Use Linting Tools to Save Time]]></summary></entry></feed>